// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module nonlinear_leaky_row (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        local_buf_address0,
        local_buf_ce0,
        local_buf_we0,
        local_buf_d0,
        Input_0_address0,
        Input_0_ce0,
        Input_0_q0,
        Input_1_address0,
        Input_1_ce0,
        Input_1_q0,
        Input_2_address0,
        Input_2_ce0,
        Input_2_q0,
        Input_3_address0,
        Input_3_ce0,
        Input_3_q0,
        Input_4_address0,
        Input_4_ce0,
        Input_4_q0,
        Input_5_address0,
        Input_5_ce0,
        Input_5_q0,
        Input_6_address0,
        Input_6_ce0,
        Input_6_q0,
        Input_7_address0,
        Input_7_ce0,
        Input_7_q0,
        Input_8_address0,
        Input_8_ce0,
        Input_8_q0,
        Input_9_address0,
        Input_9_ce0,
        Input_9_q0,
        Input_10_address0,
        Input_10_ce0,
        Input_10_q0,
        Input_11_address0,
        Input_11_ce0,
        Input_11_q0,
        Input_12_address0,
        Input_12_ce0,
        Input_12_q0,
        Input_13_address0,
        Input_13_ce0,
        Input_13_q0,
        Input_14_address0,
        Input_14_ce0,
        Input_14_q0,
        Input_15_address0,
        Input_15_ce0,
        Input_15_q0,
        Input_16_address0,
        Input_16_ce0,
        Input_16_q0,
        Input_17_address0,
        Input_17_ce0,
        Input_17_q0,
        Input_18_address0,
        Input_18_ce0,
        Input_18_q0,
        Input_19_address0,
        Input_19_ce0,
        Input_19_q0,
        Input_20_address0,
        Input_20_ce0,
        Input_20_q0,
        Input_21_address0,
        Input_21_ce0,
        Input_21_q0,
        Input_22_address0,
        Input_22_ce0,
        Input_22_q0,
        Input_23_address0,
        Input_23_ce0,
        Input_23_q0,
        Input_24_address0,
        Input_24_ce0,
        Input_24_q0,
        Input_25_address0,
        Input_25_ce0,
        Input_25_q0,
        Input_26_address0,
        Input_26_ce0,
        Input_26_q0,
        Input_27_address0,
        Input_27_ce0,
        Input_27_q0,
        Input_28_address0,
        Input_28_ce0,
        Input_28_q0,
        Input_29_address0,
        Input_29_ce0,
        Input_29_q0,
        Input_30_address0,
        Input_30_ce0,
        Input_30_q0,
        Input_31_address0,
        Input_31_ce0,
        Input_31_q0,
        Input_32_address0,
        Input_32_ce0,
        Input_32_q0,
        Input_33_address0,
        Input_33_ce0,
        Input_33_q0,
        Input_34_address0,
        Input_34_ce0,
        Input_34_q0,
        Input_35_address0,
        Input_35_ce0,
        Input_35_q0,
        Input_36_address0,
        Input_36_ce0,
        Input_36_q0,
        Input_37_address0,
        Input_37_ce0,
        Input_37_q0,
        Input_38_address0,
        Input_38_ce0,
        Input_38_q0,
        Input_39_address0,
        Input_39_ce0,
        Input_39_q0,
        Input_40_address0,
        Input_40_ce0,
        Input_40_q0,
        Input_41_address0,
        Input_41_ce0,
        Input_41_q0,
        Input_42_address0,
        Input_42_ce0,
        Input_42_q0,
        Input_43_address0,
        Input_43_ce0,
        Input_43_q0,
        Input_44_address0,
        Input_44_ce0,
        Input_44_q0,
        Input_45_address0,
        Input_45_ce0,
        Input_45_q0,
        Input_46_address0,
        Input_46_ce0,
        Input_46_q0,
        Input_47_address0,
        Input_47_ce0,
        Input_47_q0,
        Input_48_address0,
        Input_48_ce0,
        Input_48_q0,
        Input_49_address0,
        Input_49_ce0,
        Input_49_q0,
        Input_50_address0,
        Input_50_ce0,
        Input_50_q0,
        Input_51_address0,
        Input_51_ce0,
        Input_51_q0,
        Input_52_address0,
        Input_52_ce0,
        Input_52_q0,
        Input_53_address0,
        Input_53_ce0,
        Input_53_q0,
        Input_54_address0,
        Input_54_ce0,
        Input_54_q0,
        Input_55_address0,
        Input_55_ce0,
        Input_55_q0,
        Input_56_address0,
        Input_56_ce0,
        Input_56_q0,
        Input_57_address0,
        Input_57_ce0,
        Input_57_q0,
        Input_58_address0,
        Input_58_ce0,
        Input_58_q0,
        Input_59_address0,
        Input_59_ce0,
        Input_59_q0,
        tm,
        tr,
        tm_n_read,
        tr_n_read,
        TC_MIN,
        IsNL,
        enable,
        InterSubOutput,
        ltype,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_state6 = 4'd4;
parameter    ap_ST_fsm_state7 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] local_buf_address0;
output   local_buf_ce0;
output   local_buf_we0;
output  [31:0] local_buf_d0;
output  [9:0] Input_0_address0;
output   Input_0_ce0;
input  [31:0] Input_0_q0;
output  [9:0] Input_1_address0;
output   Input_1_ce0;
input  [31:0] Input_1_q0;
output  [9:0] Input_2_address0;
output   Input_2_ce0;
input  [31:0] Input_2_q0;
output  [9:0] Input_3_address0;
output   Input_3_ce0;
input  [31:0] Input_3_q0;
output  [9:0] Input_4_address0;
output   Input_4_ce0;
input  [31:0] Input_4_q0;
output  [9:0] Input_5_address0;
output   Input_5_ce0;
input  [31:0] Input_5_q0;
output  [9:0] Input_6_address0;
output   Input_6_ce0;
input  [31:0] Input_6_q0;
output  [9:0] Input_7_address0;
output   Input_7_ce0;
input  [31:0] Input_7_q0;
output  [9:0] Input_8_address0;
output   Input_8_ce0;
input  [31:0] Input_8_q0;
output  [9:0] Input_9_address0;
output   Input_9_ce0;
input  [31:0] Input_9_q0;
output  [9:0] Input_10_address0;
output   Input_10_ce0;
input  [31:0] Input_10_q0;
output  [9:0] Input_11_address0;
output   Input_11_ce0;
input  [31:0] Input_11_q0;
output  [9:0] Input_12_address0;
output   Input_12_ce0;
input  [31:0] Input_12_q0;
output  [9:0] Input_13_address0;
output   Input_13_ce0;
input  [31:0] Input_13_q0;
output  [9:0] Input_14_address0;
output   Input_14_ce0;
input  [31:0] Input_14_q0;
output  [9:0] Input_15_address0;
output   Input_15_ce0;
input  [31:0] Input_15_q0;
output  [9:0] Input_16_address0;
output   Input_16_ce0;
input  [31:0] Input_16_q0;
output  [9:0] Input_17_address0;
output   Input_17_ce0;
input  [31:0] Input_17_q0;
output  [9:0] Input_18_address0;
output   Input_18_ce0;
input  [31:0] Input_18_q0;
output  [9:0] Input_19_address0;
output   Input_19_ce0;
input  [31:0] Input_19_q0;
output  [9:0] Input_20_address0;
output   Input_20_ce0;
input  [31:0] Input_20_q0;
output  [9:0] Input_21_address0;
output   Input_21_ce0;
input  [31:0] Input_21_q0;
output  [9:0] Input_22_address0;
output   Input_22_ce0;
input  [31:0] Input_22_q0;
output  [9:0] Input_23_address0;
output   Input_23_ce0;
input  [31:0] Input_23_q0;
output  [9:0] Input_24_address0;
output   Input_24_ce0;
input  [31:0] Input_24_q0;
output  [9:0] Input_25_address0;
output   Input_25_ce0;
input  [31:0] Input_25_q0;
output  [9:0] Input_26_address0;
output   Input_26_ce0;
input  [31:0] Input_26_q0;
output  [9:0] Input_27_address0;
output   Input_27_ce0;
input  [31:0] Input_27_q0;
output  [9:0] Input_28_address0;
output   Input_28_ce0;
input  [31:0] Input_28_q0;
output  [9:0] Input_29_address0;
output   Input_29_ce0;
input  [31:0] Input_29_q0;
output  [9:0] Input_30_address0;
output   Input_30_ce0;
input  [31:0] Input_30_q0;
output  [9:0] Input_31_address0;
output   Input_31_ce0;
input  [31:0] Input_31_q0;
output  [9:0] Input_32_address0;
output   Input_32_ce0;
input  [31:0] Input_32_q0;
output  [9:0] Input_33_address0;
output   Input_33_ce0;
input  [31:0] Input_33_q0;
output  [9:0] Input_34_address0;
output   Input_34_ce0;
input  [31:0] Input_34_q0;
output  [9:0] Input_35_address0;
output   Input_35_ce0;
input  [31:0] Input_35_q0;
output  [9:0] Input_36_address0;
output   Input_36_ce0;
input  [31:0] Input_36_q0;
output  [9:0] Input_37_address0;
output   Input_37_ce0;
input  [31:0] Input_37_q0;
output  [9:0] Input_38_address0;
output   Input_38_ce0;
input  [31:0] Input_38_q0;
output  [9:0] Input_39_address0;
output   Input_39_ce0;
input  [31:0] Input_39_q0;
output  [9:0] Input_40_address0;
output   Input_40_ce0;
input  [31:0] Input_40_q0;
output  [9:0] Input_41_address0;
output   Input_41_ce0;
input  [31:0] Input_41_q0;
output  [9:0] Input_42_address0;
output   Input_42_ce0;
input  [31:0] Input_42_q0;
output  [9:0] Input_43_address0;
output   Input_43_ce0;
input  [31:0] Input_43_q0;
output  [9:0] Input_44_address0;
output   Input_44_ce0;
input  [31:0] Input_44_q0;
output  [9:0] Input_45_address0;
output   Input_45_ce0;
input  [31:0] Input_45_q0;
output  [9:0] Input_46_address0;
output   Input_46_ce0;
input  [31:0] Input_46_q0;
output  [9:0] Input_47_address0;
output   Input_47_ce0;
input  [31:0] Input_47_q0;
output  [9:0] Input_48_address0;
output   Input_48_ce0;
input  [31:0] Input_48_q0;
output  [9:0] Input_49_address0;
output   Input_49_ce0;
input  [31:0] Input_49_q0;
output  [9:0] Input_50_address0;
output   Input_50_ce0;
input  [31:0] Input_50_q0;
output  [9:0] Input_51_address0;
output   Input_51_ce0;
input  [31:0] Input_51_q0;
output  [9:0] Input_52_address0;
output   Input_52_ce0;
input  [31:0] Input_52_q0;
output  [9:0] Input_53_address0;
output   Input_53_ce0;
input  [31:0] Input_53_q0;
output  [9:0] Input_54_address0;
output   Input_54_ce0;
input  [31:0] Input_54_q0;
output  [9:0] Input_55_address0;
output   Input_55_ce0;
input  [31:0] Input_55_q0;
output  [9:0] Input_56_address0;
output   Input_56_ce0;
input  [31:0] Input_56_q0;
output  [9:0] Input_57_address0;
output   Input_57_ce0;
input  [31:0] Input_57_q0;
output  [9:0] Input_58_address0;
output   Input_58_ce0;
input  [31:0] Input_58_q0;
output  [9:0] Input_59_address0;
output   Input_59_ce0;
input  [31:0] Input_59_q0;
input  [7:0] tm;
input  [7:0] tr;
input  [7:0] tm_n_read;
input  [7:0] tr_n_read;
input  [7:0] TC_MIN;
input   IsNL;
input   enable;
input  [31:0] InterSubOutput;
input  [7:0] ltype;
output  [7:0] ap_return_0;
output  [7:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] local_buf_address0;
reg local_buf_ce0;
reg local_buf_we0;
reg[31:0] local_buf_d0;
reg Input_0_ce0;
reg Input_1_ce0;
reg Input_2_ce0;
reg Input_3_ce0;
reg Input_4_ce0;
reg Input_5_ce0;
reg Input_6_ce0;
reg Input_7_ce0;
reg Input_8_ce0;
reg Input_9_ce0;
reg Input_10_ce0;
reg Input_11_ce0;
reg Input_12_ce0;
reg Input_13_ce0;
reg Input_14_ce0;
reg Input_15_ce0;
reg Input_16_ce0;
reg Input_17_ce0;
reg Input_18_ce0;
reg Input_19_ce0;
reg Input_20_ce0;
reg Input_21_ce0;
reg Input_22_ce0;
reg Input_23_ce0;
reg Input_24_ce0;
reg Input_25_ce0;
reg Input_26_ce0;
reg Input_27_ce0;
reg Input_28_ce0;
reg Input_29_ce0;
reg Input_30_ce0;
reg Input_31_ce0;
reg Input_32_ce0;
reg Input_33_ce0;
reg Input_34_ce0;
reg Input_35_ce0;
reg Input_36_ce0;
reg Input_37_ce0;
reg Input_38_ce0;
reg Input_39_ce0;
reg Input_40_ce0;
reg Input_41_ce0;
reg Input_42_ce0;
reg Input_43_ce0;
reg Input_44_ce0;
reg Input_45_ce0;
reg Input_46_ce0;
reg Input_47_ce0;
reg Input_48_ce0;
reg Input_49_ce0;
reg Input_50_ce0;
reg Input_51_ce0;
reg Input_52_ce0;
reg Input_53_ce0;
reg Input_54_ce0;
reg Input_55_ce0;
reg Input_56_ce0;
reg Input_57_ce0;
reg Input_58_ce0;
reg Input_59_ce0;
reg[7:0] ap_return_0;
reg[7:0] ap_return_1;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [15:0] buf_256b_1_0121_reg_1061;
reg   [15:0] buf_256b_0_0120_reg_1073;
reg   [7:0] tc_0_reg_1085;
wire   [0:0] enable_read_read_fu_218_p2;
wire   [10:0] mul_ln186_fu_1129_p2;
reg   [10:0] mul_ln186_reg_1571;
wire   [0:0] icmp_ln198_fu_1135_p2;
reg   [0:0] icmp_ln198_reg_1576;
wire   [5:0] trunc_ln186_fu_1141_p1;
reg   [5:0] trunc_ln186_reg_1581;
wire   [0:0] icmp_ln182_fu_1150_p2;
reg   [0:0] icmp_ln182_reg_1586;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln182_reg_1586_pp0_iter1_reg;
reg   [0:0] icmp_ln182_reg_1586_pp0_iter2_reg;
wire   [7:0] tc_fu_1155_p2;
reg    ap_enable_reg_pp0_iter0;
wire  signed [31:0] tmp_out_3_fu_1234_p62;
reg  signed [31:0] tmp_out_3_reg_1895;
reg  signed [31:0] tmp_out_3_reg_1895_pp0_iter2_reg;
wire   [44:0] mul_ln191_fu_1362_p2;
reg   [44:0] mul_ln191_reg_1902;
wire   [15:0] buf_256b_1_4_fu_1424_p3;
reg    ap_enable_reg_pp0_iter3;
wire   [15:0] buf_256b_1_5_fu_1432_p3;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg   [7:0] phi_ln224_reg_1096;
wire    ap_CS_fsm_state6;
reg   [7:0] phi_ln224_1_reg_1105;
wire  signed [63:0] sext_ln186_fu_1170_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln212_fu_1466_p1;
wire   [0:0] icmp_ln209_fu_1446_p2;
wire   [63:0] zext_ln219_fu_1501_p1;
wire   [0:0] icmp_ln217_fu_1486_p2;
reg   [7:0] bn_local_1_fu_198;
wire   [7:0] bn_local_fu_1440_p2;
reg   [7:0] cnt_2_fu_202;
wire   [7:0] cnt_fu_1471_p2;
wire   [31:0] tmp_1_fu_1457_p3;
wire   [31:0] tmp_fu_1492_p3;
wire   [7:0] mul_ln186_fu_1129_p1;
wire   [10:0] zext_ln186_1_fu_1161_p1;
wire   [10:0] add_ln186_fu_1165_p2;
wire  signed [31:0] mul_ln191_fu_1362_p1;
wire   [0:0] tmp_2_fu_1368_p3;
wire   [0:0] and_ln190_fu_1375_p1;
wire   [29:0] trunc_ln4_fu_1380_p4;
wire   [0:0] and_ln190_fu_1375_p2;
wire  signed [31:0] tmp_out_fu_1389_p1;
wire   [31:0] tmp_out_2_fu_1393_p3;
wire   [31:0] ashr_ln200_fu_1400_p2;
wire   [15:0] trunc_ln198_fu_1405_p1;
wire   [15:0] trunc_ln198_1_fu_1409_p1;
wire   [0:0] trunc_ln206_fu_1420_p1;
wire   [15:0] tmp_int16_fu_1413_p3;
wire   [3:0] trunc_ln182_fu_1482_p1;
wire    ap_CS_fsm_state7;
reg   [7:0] ap_return_0_preg;
reg   [7:0] ap_return_1_preg;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [10:0] mul_ln186_fu_1129_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_return_0_preg = 8'd0;
#0 ap_return_1_preg = 8'd0;
end

FPGA_Acc_mux_606_enQ #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 32 ),
    .din17_WIDTH( 32 ),
    .din18_WIDTH( 32 ),
    .din19_WIDTH( 32 ),
    .din20_WIDTH( 32 ),
    .din21_WIDTH( 32 ),
    .din22_WIDTH( 32 ),
    .din23_WIDTH( 32 ),
    .din24_WIDTH( 32 ),
    .din25_WIDTH( 32 ),
    .din26_WIDTH( 32 ),
    .din27_WIDTH( 32 ),
    .din28_WIDTH( 32 ),
    .din29_WIDTH( 32 ),
    .din30_WIDTH( 32 ),
    .din31_WIDTH( 32 ),
    .din32_WIDTH( 32 ),
    .din33_WIDTH( 32 ),
    .din34_WIDTH( 32 ),
    .din35_WIDTH( 32 ),
    .din36_WIDTH( 32 ),
    .din37_WIDTH( 32 ),
    .din38_WIDTH( 32 ),
    .din39_WIDTH( 32 ),
    .din40_WIDTH( 32 ),
    .din41_WIDTH( 32 ),
    .din42_WIDTH( 32 ),
    .din43_WIDTH( 32 ),
    .din44_WIDTH( 32 ),
    .din45_WIDTH( 32 ),
    .din46_WIDTH( 32 ),
    .din47_WIDTH( 32 ),
    .din48_WIDTH( 32 ),
    .din49_WIDTH( 32 ),
    .din50_WIDTH( 32 ),
    .din51_WIDTH( 32 ),
    .din52_WIDTH( 32 ),
    .din53_WIDTH( 32 ),
    .din54_WIDTH( 32 ),
    .din55_WIDTH( 32 ),
    .din56_WIDTH( 32 ),
    .din57_WIDTH( 32 ),
    .din58_WIDTH( 32 ),
    .din59_WIDTH( 32 ),
    .din60_WIDTH( 6 ),
    .dout_WIDTH( 32 ))
FPGA_Acc_mux_606_enQ_U839(
    .din0(Input_0_q0),
    .din1(Input_1_q0),
    .din2(Input_2_q0),
    .din3(Input_3_q0),
    .din4(Input_4_q0),
    .din5(Input_5_q0),
    .din6(Input_6_q0),
    .din7(Input_7_q0),
    .din8(Input_8_q0),
    .din9(Input_9_q0),
    .din10(Input_10_q0),
    .din11(Input_11_q0),
    .din12(Input_12_q0),
    .din13(Input_13_q0),
    .din14(Input_14_q0),
    .din15(Input_15_q0),
    .din16(Input_16_q0),
    .din17(Input_17_q0),
    .din18(Input_18_q0),
    .din19(Input_19_q0),
    .din20(Input_20_q0),
    .din21(Input_21_q0),
    .din22(Input_22_q0),
    .din23(Input_23_q0),
    .din24(Input_24_q0),
    .din25(Input_25_q0),
    .din26(Input_26_q0),
    .din27(Input_27_q0),
    .din28(Input_28_q0),
    .din29(Input_29_q0),
    .din30(Input_30_q0),
    .din31(Input_31_q0),
    .din32(Input_32_q0),
    .din33(Input_33_q0),
    .din34(Input_34_q0),
    .din35(Input_35_q0),
    .din36(Input_36_q0),
    .din37(Input_37_q0),
    .din38(Input_38_q0),
    .din39(Input_39_q0),
    .din40(Input_40_q0),
    .din41(Input_41_q0),
    .din42(Input_42_q0),
    .din43(Input_43_q0),
    .din44(Input_44_q0),
    .din45(Input_45_q0),
    .din46(Input_46_q0),
    .din47(Input_47_q0),
    .din48(Input_48_q0),
    .din49(Input_49_q0),
    .din50(Input_50_q0),
    .din51(Input_51_q0),
    .din52(Input_52_q0),
    .din53(Input_53_q0),
    .din54(Input_54_q0),
    .din55(Input_55_q0),
    .din56(Input_56_q0),
    .din57(Input_57_q0),
    .din58(Input_58_q0),
    .din59(Input_59_q0),
    .din60(trunc_ln186_reg_1581),
    .dout(tmp_out_3_fu_1234_p62)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (enable_read_read_fu_218_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((ap_start == 1'b1) & (enable_read_read_fu_218_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_return_0_preg <= phi_ln224_1_reg_1105;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_return_1_preg <= phi_ln224_reg_1096;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln209_fu_1446_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        bn_local_1_fu_198 <= bn_local_fu_1440_p2;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln209_fu_1446_p2 == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_start == 1'b1) & (enable_read_read_fu_218_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1)))) begin
        bn_local_1_fu_198 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln209_fu_1446_p2 == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        cnt_2_fu_202 <= cnt_fu_1471_p2;
    end else if (((ap_start == 1'b1) & (enable_read_read_fu_218_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        cnt_2_fu_202 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (enable_read_read_fu_218_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_ln224_1_reg_1105 <= tm_n_read;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        phi_ln224_1_reg_1105 <= tm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (enable_read_read_fu_218_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_ln224_reg_1096 <= tr_n_read;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        phi_ln224_reg_1096 <= tr;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln182_fu_1150_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tc_0_reg_1085 <= tc_fu_1155_p2;
    end else if (((ap_start == 1'b1) & (enable_read_read_fu_218_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        tc_0_reg_1085 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln182_reg_1586_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        buf_256b_0_0120_reg_1073 <= buf_256b_1_5_fu_1432_p3;
        buf_256b_1_0121_reg_1061 <= buf_256b_1_4_fu_1424_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln182_reg_1586 <= icmp_ln182_fu_1150_p2;
        icmp_ln182_reg_1586_pp0_iter1_reg <= icmp_ln182_reg_1586;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln182_reg_1586_pp0_iter2_reg <= icmp_ln182_reg_1586_pp0_iter1_reg;
        tmp_out_3_reg_1895_pp0_iter2_reg <= tmp_out_3_reg_1895;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (enable_read_read_fu_218_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        icmp_ln198_reg_1576 <= icmp_ln198_fu_1135_p2;
        mul_ln186_reg_1571 <= mul_ln186_fu_1129_p2;
        trunc_ln186_reg_1581 <= trunc_ln186_fu_1141_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln182_reg_1586_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mul_ln191_reg_1902 <= mul_ln191_fu_1362_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln182_reg_1586 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_out_3_reg_1895 <= tmp_out_3_fu_1234_p62;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_0_ce0 = 1'b1;
    end else begin
        Input_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_10_ce0 = 1'b1;
    end else begin
        Input_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_11_ce0 = 1'b1;
    end else begin
        Input_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_12_ce0 = 1'b1;
    end else begin
        Input_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_13_ce0 = 1'b1;
    end else begin
        Input_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_14_ce0 = 1'b1;
    end else begin
        Input_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_15_ce0 = 1'b1;
    end else begin
        Input_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_16_ce0 = 1'b1;
    end else begin
        Input_16_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_17_ce0 = 1'b1;
    end else begin
        Input_17_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_18_ce0 = 1'b1;
    end else begin
        Input_18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_19_ce0 = 1'b1;
    end else begin
        Input_19_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_1_ce0 = 1'b1;
    end else begin
        Input_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_20_ce0 = 1'b1;
    end else begin
        Input_20_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_21_ce0 = 1'b1;
    end else begin
        Input_21_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_22_ce0 = 1'b1;
    end else begin
        Input_22_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_23_ce0 = 1'b1;
    end else begin
        Input_23_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_24_ce0 = 1'b1;
    end else begin
        Input_24_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_25_ce0 = 1'b1;
    end else begin
        Input_25_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_26_ce0 = 1'b1;
    end else begin
        Input_26_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_27_ce0 = 1'b1;
    end else begin
        Input_27_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_28_ce0 = 1'b1;
    end else begin
        Input_28_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_29_ce0 = 1'b1;
    end else begin
        Input_29_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_2_ce0 = 1'b1;
    end else begin
        Input_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_30_ce0 = 1'b1;
    end else begin
        Input_30_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_31_ce0 = 1'b1;
    end else begin
        Input_31_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_32_ce0 = 1'b1;
    end else begin
        Input_32_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_33_ce0 = 1'b1;
    end else begin
        Input_33_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_34_ce0 = 1'b1;
    end else begin
        Input_34_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_35_ce0 = 1'b1;
    end else begin
        Input_35_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_36_ce0 = 1'b1;
    end else begin
        Input_36_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_37_ce0 = 1'b1;
    end else begin
        Input_37_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_38_ce0 = 1'b1;
    end else begin
        Input_38_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_39_ce0 = 1'b1;
    end else begin
        Input_39_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_3_ce0 = 1'b1;
    end else begin
        Input_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_40_ce0 = 1'b1;
    end else begin
        Input_40_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_41_ce0 = 1'b1;
    end else begin
        Input_41_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_42_ce0 = 1'b1;
    end else begin
        Input_42_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_43_ce0 = 1'b1;
    end else begin
        Input_43_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_44_ce0 = 1'b1;
    end else begin
        Input_44_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_45_ce0 = 1'b1;
    end else begin
        Input_45_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_46_ce0 = 1'b1;
    end else begin
        Input_46_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_47_ce0 = 1'b1;
    end else begin
        Input_47_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_48_ce0 = 1'b1;
    end else begin
        Input_48_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_49_ce0 = 1'b1;
    end else begin
        Input_49_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_4_ce0 = 1'b1;
    end else begin
        Input_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_50_ce0 = 1'b1;
    end else begin
        Input_50_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_51_ce0 = 1'b1;
    end else begin
        Input_51_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_52_ce0 = 1'b1;
    end else begin
        Input_52_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_53_ce0 = 1'b1;
    end else begin
        Input_53_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_54_ce0 = 1'b1;
    end else begin
        Input_54_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_55_ce0 = 1'b1;
    end else begin
        Input_55_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_56_ce0 = 1'b1;
    end else begin
        Input_56_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_57_ce0 = 1'b1;
    end else begin
        Input_57_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_58_ce0 = 1'b1;
    end else begin
        Input_58_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_59_ce0 = 1'b1;
    end else begin
        Input_59_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_5_ce0 = 1'b1;
    end else begin
        Input_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_6_ce0 = 1'b1;
    end else begin
        Input_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_7_ce0 = 1'b1;
    end else begin
        Input_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_8_ce0 = 1'b1;
    end else begin
        Input_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Input_9_ce0 = 1'b1;
    end else begin
        Input_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln182_fu_1150_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_return_0 = phi_ln224_1_reg_1105;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_return_1 = phi_ln224_reg_1096;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        local_buf_address0 = zext_ln219_fu_1501_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        local_buf_address0 = zext_ln212_fu_1466_p1;
    end else begin
        local_buf_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        local_buf_ce0 = 1'b1;
    end else begin
        local_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        local_buf_d0 = tmp_fu_1492_p3;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        local_buf_d0 = tmp_1_fu_1457_p3;
    end else begin
        local_buf_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln217_fu_1486_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6)) | ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln209_fu_1446_p2 == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        local_buf_we0 = 1'b1;
    end else begin
        local_buf_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (enable_read_read_fu_218_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_start == 1'b1) & (enable_read_read_fu_218_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln182_fu_1150_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln182_fu_1150_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Input_0_address0 = sext_ln186_fu_1170_p1;

assign Input_10_address0 = sext_ln186_fu_1170_p1;

assign Input_11_address0 = sext_ln186_fu_1170_p1;

assign Input_12_address0 = sext_ln186_fu_1170_p1;

assign Input_13_address0 = sext_ln186_fu_1170_p1;

assign Input_14_address0 = sext_ln186_fu_1170_p1;

assign Input_15_address0 = sext_ln186_fu_1170_p1;

assign Input_16_address0 = sext_ln186_fu_1170_p1;

assign Input_17_address0 = sext_ln186_fu_1170_p1;

assign Input_18_address0 = sext_ln186_fu_1170_p1;

assign Input_19_address0 = sext_ln186_fu_1170_p1;

assign Input_1_address0 = sext_ln186_fu_1170_p1;

assign Input_20_address0 = sext_ln186_fu_1170_p1;

assign Input_21_address0 = sext_ln186_fu_1170_p1;

assign Input_22_address0 = sext_ln186_fu_1170_p1;

assign Input_23_address0 = sext_ln186_fu_1170_p1;

assign Input_24_address0 = sext_ln186_fu_1170_p1;

assign Input_25_address0 = sext_ln186_fu_1170_p1;

assign Input_26_address0 = sext_ln186_fu_1170_p1;

assign Input_27_address0 = sext_ln186_fu_1170_p1;

assign Input_28_address0 = sext_ln186_fu_1170_p1;

assign Input_29_address0 = sext_ln186_fu_1170_p1;

assign Input_2_address0 = sext_ln186_fu_1170_p1;

assign Input_30_address0 = sext_ln186_fu_1170_p1;

assign Input_31_address0 = sext_ln186_fu_1170_p1;

assign Input_32_address0 = sext_ln186_fu_1170_p1;

assign Input_33_address0 = sext_ln186_fu_1170_p1;

assign Input_34_address0 = sext_ln186_fu_1170_p1;

assign Input_35_address0 = sext_ln186_fu_1170_p1;

assign Input_36_address0 = sext_ln186_fu_1170_p1;

assign Input_37_address0 = sext_ln186_fu_1170_p1;

assign Input_38_address0 = sext_ln186_fu_1170_p1;

assign Input_39_address0 = sext_ln186_fu_1170_p1;

assign Input_3_address0 = sext_ln186_fu_1170_p1;

assign Input_40_address0 = sext_ln186_fu_1170_p1;

assign Input_41_address0 = sext_ln186_fu_1170_p1;

assign Input_42_address0 = sext_ln186_fu_1170_p1;

assign Input_43_address0 = sext_ln186_fu_1170_p1;

assign Input_44_address0 = sext_ln186_fu_1170_p1;

assign Input_45_address0 = sext_ln186_fu_1170_p1;

assign Input_46_address0 = sext_ln186_fu_1170_p1;

assign Input_47_address0 = sext_ln186_fu_1170_p1;

assign Input_48_address0 = sext_ln186_fu_1170_p1;

assign Input_49_address0 = sext_ln186_fu_1170_p1;

assign Input_4_address0 = sext_ln186_fu_1170_p1;

assign Input_50_address0 = sext_ln186_fu_1170_p1;

assign Input_51_address0 = sext_ln186_fu_1170_p1;

assign Input_52_address0 = sext_ln186_fu_1170_p1;

assign Input_53_address0 = sext_ln186_fu_1170_p1;

assign Input_54_address0 = sext_ln186_fu_1170_p1;

assign Input_55_address0 = sext_ln186_fu_1170_p1;

assign Input_56_address0 = sext_ln186_fu_1170_p1;

assign Input_57_address0 = sext_ln186_fu_1170_p1;

assign Input_58_address0 = sext_ln186_fu_1170_p1;

assign Input_59_address0 = sext_ln186_fu_1170_p1;

assign Input_5_address0 = sext_ln186_fu_1170_p1;

assign Input_6_address0 = sext_ln186_fu_1170_p1;

assign Input_7_address0 = sext_ln186_fu_1170_p1;

assign Input_8_address0 = sext_ln186_fu_1170_p1;

assign Input_9_address0 = sext_ln186_fu_1170_p1;

assign add_ln186_fu_1165_p2 = (zext_ln186_1_fu_1161_p1 + mul_ln186_reg_1571);

assign and_ln190_fu_1375_p1 = IsNL;

assign and_ln190_fu_1375_p2 = (tmp_2_fu_1368_p3 & and_ln190_fu_1375_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ashr_ln200_fu_1400_p2 = $signed(tmp_out_2_fu_1393_p3) >>> InterSubOutput;

assign bn_local_fu_1440_p2 = (8'd1 + bn_local_1_fu_198);

assign buf_256b_1_4_fu_1424_p3 = ((trunc_ln206_fu_1420_p1[0:0] === 1'b1) ? tmp_int16_fu_1413_p3 : buf_256b_1_0121_reg_1061);

assign buf_256b_1_5_fu_1432_p3 = ((trunc_ln206_fu_1420_p1[0:0] === 1'b1) ? buf_256b_0_0120_reg_1073 : tmp_int16_fu_1413_p3);

assign cnt_fu_1471_p2 = (cnt_2_fu_202 + 8'd1);

assign enable_read_read_fu_218_p2 = enable;

assign icmp_ln182_fu_1150_p2 = ((tc_0_reg_1085 == TC_MIN) ? 1'b1 : 1'b0);

assign icmp_ln198_fu_1135_p2 = ((ltype == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln209_fu_1446_p2 = ((bn_local_fu_1440_p2 == 8'd2) ? 1'b1 : 1'b0);

assign icmp_ln217_fu_1486_p2 = ((trunc_ln182_fu_1482_p1 == 4'd0) ? 1'b1 : 1'b0);

assign mul_ln186_fu_1129_p1 = mul_ln186_fu_1129_p10;

assign mul_ln186_fu_1129_p10 = tr;

assign mul_ln186_fu_1129_p2 = (11'd26 * mul_ln186_fu_1129_p1);

assign mul_ln191_fu_1362_p1 = tmp_out_3_reg_1895;

assign mul_ln191_fu_1362_p2 = ($signed({{1'b0}, {45'd3276}}) * $signed(mul_ln191_fu_1362_p1));

assign sext_ln186_fu_1170_p1 = $signed(add_ln186_fu_1165_p2);

assign tc_fu_1155_p2 = (tc_0_reg_1085 + 8'd1);

assign tmp_1_fu_1457_p3 = {{buf_256b_1_4_fu_1424_p3}, {buf_256b_1_5_fu_1432_p3}};

assign tmp_2_fu_1368_p3 = tmp_out_3_reg_1895_pp0_iter2_reg[32'd31];

assign tmp_fu_1492_p3 = {{buf_256b_1_0121_reg_1061}, {buf_256b_0_0120_reg_1073}};

assign tmp_int16_fu_1413_p3 = ((icmp_ln198_reg_1576[0:0] === 1'b1) ? trunc_ln198_fu_1405_p1 : trunc_ln198_1_fu_1409_p1);

assign tmp_out_2_fu_1393_p3 = ((and_ln190_fu_1375_p2[0:0] === 1'b1) ? tmp_out_fu_1389_p1 : tmp_out_3_reg_1895_pp0_iter2_reg);

assign tmp_out_fu_1389_p1 = $signed(trunc_ln4_fu_1380_p4);

assign trunc_ln182_fu_1482_p1 = bn_local_1_fu_198[3:0];

assign trunc_ln186_fu_1141_p1 = tm[5:0];

assign trunc_ln198_1_fu_1409_p1 = tmp_out_2_fu_1393_p3[15:0];

assign trunc_ln198_fu_1405_p1 = ashr_ln200_fu_1400_p2[15:0];

assign trunc_ln206_fu_1420_p1 = bn_local_1_fu_198[0:0];

assign trunc_ln4_fu_1380_p4 = {{mul_ln191_reg_1902[44:15]}};

assign zext_ln186_1_fu_1161_p1 = tc_0_reg_1085;

assign zext_ln212_fu_1466_p1 = cnt_2_fu_202;

assign zext_ln219_fu_1501_p1 = cnt_2_fu_202;

endmodule //nonlinear_leaky_row
