// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module input_load (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_input_r_AWVALID,
        m_axi_input_r_AWREADY,
        m_axi_input_r_AWADDR,
        m_axi_input_r_AWID,
        m_axi_input_r_AWLEN,
        m_axi_input_r_AWSIZE,
        m_axi_input_r_AWBURST,
        m_axi_input_r_AWLOCK,
        m_axi_input_r_AWCACHE,
        m_axi_input_r_AWPROT,
        m_axi_input_r_AWQOS,
        m_axi_input_r_AWREGION,
        m_axi_input_r_AWUSER,
        m_axi_input_r_WVALID,
        m_axi_input_r_WREADY,
        m_axi_input_r_WDATA,
        m_axi_input_r_WSTRB,
        m_axi_input_r_WLAST,
        m_axi_input_r_WID,
        m_axi_input_r_WUSER,
        m_axi_input_r_ARVALID,
        m_axi_input_r_ARREADY,
        m_axi_input_r_ARADDR,
        m_axi_input_r_ARID,
        m_axi_input_r_ARLEN,
        m_axi_input_r_ARSIZE,
        m_axi_input_r_ARBURST,
        m_axi_input_r_ARLOCK,
        m_axi_input_r_ARCACHE,
        m_axi_input_r_ARPROT,
        m_axi_input_r_ARQOS,
        m_axi_input_r_ARREGION,
        m_axi_input_r_ARUSER,
        m_axi_input_r_RVALID,
        m_axi_input_r_RREADY,
        m_axi_input_r_RDATA,
        m_axi_input_r_RLAST,
        m_axi_input_r_RID,
        m_axi_input_r_RUSER,
        m_axi_input_r_RRESP,
        m_axi_input_r_BVALID,
        m_axi_input_r_BREADY,
        m_axi_input_r_BRESP,
        m_axi_input_r_BID,
        m_axi_input_r_BUSER,
        input_offset,
        input_buffer_0_address0,
        input_buffer_0_ce0,
        input_buffer_0_we0,
        input_buffer_0_d0,
        input_buffer_0_address1,
        input_buffer_0_ce1,
        input_buffer_0_we1,
        input_buffer_0_d1,
        input_buffer_1_address0,
        input_buffer_1_ce0,
        input_buffer_1_we0,
        input_buffer_1_d0,
        input_buffer_1_address1,
        input_buffer_1_ce1,
        input_buffer_1_we1,
        input_buffer_1_d1,
        r,
        c,
        n,
        Kstride,
        Padding,
        TRow,
        TCol,
        Input_w,
        IW_align_256b,
        Input_h,
        TN_MIN,
        IHxIW,
        pad_val
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_input_r_AWVALID;
input   m_axi_input_r_AWREADY;
output  [31:0] m_axi_input_r_AWADDR;
output  [0:0] m_axi_input_r_AWID;
output  [31:0] m_axi_input_r_AWLEN;
output  [2:0] m_axi_input_r_AWSIZE;
output  [1:0] m_axi_input_r_AWBURST;
output  [1:0] m_axi_input_r_AWLOCK;
output  [3:0] m_axi_input_r_AWCACHE;
output  [2:0] m_axi_input_r_AWPROT;
output  [3:0] m_axi_input_r_AWQOS;
output  [3:0] m_axi_input_r_AWREGION;
output  [0:0] m_axi_input_r_AWUSER;
output   m_axi_input_r_WVALID;
input   m_axi_input_r_WREADY;
output  [31:0] m_axi_input_r_WDATA;
output  [3:0] m_axi_input_r_WSTRB;
output   m_axi_input_r_WLAST;
output  [0:0] m_axi_input_r_WID;
output  [0:0] m_axi_input_r_WUSER;
output   m_axi_input_r_ARVALID;
input   m_axi_input_r_ARREADY;
output  [31:0] m_axi_input_r_ARADDR;
output  [0:0] m_axi_input_r_ARID;
output  [31:0] m_axi_input_r_ARLEN;
output  [2:0] m_axi_input_r_ARSIZE;
output  [1:0] m_axi_input_r_ARBURST;
output  [1:0] m_axi_input_r_ARLOCK;
output  [3:0] m_axi_input_r_ARCACHE;
output  [2:0] m_axi_input_r_ARPROT;
output  [3:0] m_axi_input_r_ARQOS;
output  [3:0] m_axi_input_r_ARREGION;
output  [0:0] m_axi_input_r_ARUSER;
input   m_axi_input_r_RVALID;
output   m_axi_input_r_RREADY;
input  [31:0] m_axi_input_r_RDATA;
input   m_axi_input_r_RLAST;
input  [0:0] m_axi_input_r_RID;
input  [0:0] m_axi_input_r_RUSER;
input  [1:0] m_axi_input_r_RRESP;
input   m_axi_input_r_BVALID;
output   m_axi_input_r_BREADY;
input  [1:0] m_axi_input_r_BRESP;
input  [0:0] m_axi_input_r_BID;
input  [0:0] m_axi_input_r_BUSER;
input  [29:0] input_offset;
output  [11:0] input_buffer_0_address0;
output   input_buffer_0_ce0;
output   input_buffer_0_we0;
output  [15:0] input_buffer_0_d0;
output  [11:0] input_buffer_0_address1;
output   input_buffer_0_ce1;
output   input_buffer_0_we1;
output  [15:0] input_buffer_0_d1;
output  [11:0] input_buffer_1_address0;
output   input_buffer_1_ce0;
output   input_buffer_1_we0;
output  [15:0] input_buffer_1_d0;
output  [11:0] input_buffer_1_address1;
output   input_buffer_1_ce1;
output   input_buffer_1_we1;
output  [15:0] input_buffer_1_d1;
input  [15:0] r;
input  [15:0] c;
input  [15:0] n;
input  [7:0] Kstride;
input  [7:0] Padding;
input  [15:0] TRow;
input  [15:0] TCol;
input  [15:0] Input_w;
input  [15:0] IW_align_256b;
input  [15:0] Input_h;
input  [7:0] TN_MIN;
input  [31:0] IHxIW;
input  [15:0] pad_val;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_input_r_ARVALID;
reg m_axi_input_r_RREADY;
reg input_buffer_0_ce0;
reg input_buffer_0_we0;
reg input_buffer_0_ce1;
reg input_buffer_0_we1;
reg input_buffer_1_ce0;
reg input_buffer_1_we0;
reg input_buffer_1_ce1;
reg input_buffer_1_we1;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [4:0] local_buf0_1_address0;
reg    local_buf0_1_ce0;
reg    local_buf0_1_we0;
wire   [31:0] local_buf0_1_q0;
reg   [4:0] local_buf1_1_address0;
reg    local_buf1_1_ce0;
reg    local_buf1_1_we0;
wire   [31:0] local_buf1_1_q0;
wire   [24:0] grp_fu_474_p3;
reg   [24:0] Coffset_reg_539;
wire   [24:0] grp_fu_482_p3;
reg   [24:0] Roffset_reg_545;
wire   [31:0] mul_ln77_fu_338_p2;
reg   [31:0] mul_ln77_reg_551;
wire    ap_CS_fsm_state2;
wire  signed [31:0] grp_fu_490_p3;
reg   [31:0] CurrentOffset_reg_597;
wire   [16:0] TnxTRow_fu_359_p3;
reg   [16:0] TnxTRow_reg_602;
wire   [16:0] or_ln86_fu_367_p2;
reg   [16:0] or_ln86_reg_607;
wire   [16:0] t_fu_378_p2;
reg   [16:0] t_reg_615;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln91_fu_384_p2;
reg   [0:0] icmp_ln91_reg_620;
wire   [0:0] icmp_ln86_fu_373_p2;
reg   [7:0] t1_n0_1_load_reg_625;
reg   [7:0] t1_n1_1_load_reg_631;
reg   [7:0] t2_n0_1_load_reg_637;
reg   [7:0] t2_n1_1_load_reg_643;
reg   [7:0] bn_n0_1_load_reg_649;
reg   [7:0] bn_n1_1_load_reg_655;
wire   [0:0] grp_fu_300_p2;
reg   [0:0] icmp_ln97_reg_661;
wire   [0:0] ap_phi_mux_pp_0_phi_fu_224_p4;
reg   [0:0] icmp_ln92_reg_666;
wire   [7:0] select_ln102_fu_458_p3;
wire    ap_CS_fsm_state5;
wire    grp_ifm_mmcpy_row_fu_278_ap_ready;
wire    grp_ifm_mmcpy_row_fu_278_ap_done;
reg   [0:0] pp_0_reg_220;
wire    grp_ifm_copy_lbuf2ibuf_fu_256_ap_ready;
wire    grp_ifm_copy_lbuf2ibuf_fu_256_ap_done;
reg    ap_block_state5_on_subcall_done;
wire   [7:0] select_ln102_1_fu_466_p3;
wire    grp_ifm_copy_lbuf2ibuf_fu_256_ap_start;
wire    grp_ifm_copy_lbuf2ibuf_fu_256_ap_idle;
wire   [11:0] grp_ifm_copy_lbuf2ibuf_fu_256_input_buffer_0_address0;
wire    grp_ifm_copy_lbuf2ibuf_fu_256_input_buffer_0_ce0;
wire    grp_ifm_copy_lbuf2ibuf_fu_256_input_buffer_0_we0;
wire   [15:0] grp_ifm_copy_lbuf2ibuf_fu_256_input_buffer_0_d0;
wire   [11:0] grp_ifm_copy_lbuf2ibuf_fu_256_input_buffer_0_address1;
wire    grp_ifm_copy_lbuf2ibuf_fu_256_input_buffer_0_ce1;
wire    grp_ifm_copy_lbuf2ibuf_fu_256_input_buffer_0_we1;
wire   [15:0] grp_ifm_copy_lbuf2ibuf_fu_256_input_buffer_0_d1;
wire   [11:0] grp_ifm_copy_lbuf2ibuf_fu_256_input_buffer_1_address0;
wire    grp_ifm_copy_lbuf2ibuf_fu_256_input_buffer_1_ce0;
wire    grp_ifm_copy_lbuf2ibuf_fu_256_input_buffer_1_we0;
wire   [15:0] grp_ifm_copy_lbuf2ibuf_fu_256_input_buffer_1_d0;
wire   [11:0] grp_ifm_copy_lbuf2ibuf_fu_256_input_buffer_1_address1;
wire    grp_ifm_copy_lbuf2ibuf_fu_256_input_buffer_1_ce1;
wire    grp_ifm_copy_lbuf2ibuf_fu_256_input_buffer_1_we1;
wire   [15:0] grp_ifm_copy_lbuf2ibuf_fu_256_input_buffer_1_d1;
wire   [4:0] grp_ifm_copy_lbuf2ibuf_fu_256_local_buf_address0;
wire    grp_ifm_copy_lbuf2ibuf_fu_256_local_buf_ce0;
reg   [31:0] grp_ifm_copy_lbuf2ibuf_fu_256_local_buf_q0;
reg   [7:0] grp_ifm_copy_lbuf2ibuf_fu_256_t1;
reg   [7:0] grp_ifm_copy_lbuf2ibuf_fu_256_t2;
reg   [7:0] grp_ifm_copy_lbuf2ibuf_fu_256_bn;
reg    grp_ifm_copy_lbuf2ibuf_fu_256_enable;
wire    grp_ifm_mmcpy_row_fu_278_ap_start;
wire    grp_ifm_mmcpy_row_fu_278_ap_idle;
wire    grp_ifm_mmcpy_row_fu_278_m_axi_input_r_AWVALID;
wire   [31:0] grp_ifm_mmcpy_row_fu_278_m_axi_input_r_AWADDR;
wire   [0:0] grp_ifm_mmcpy_row_fu_278_m_axi_input_r_AWID;
wire   [31:0] grp_ifm_mmcpy_row_fu_278_m_axi_input_r_AWLEN;
wire   [2:0] grp_ifm_mmcpy_row_fu_278_m_axi_input_r_AWSIZE;
wire   [1:0] grp_ifm_mmcpy_row_fu_278_m_axi_input_r_AWBURST;
wire   [1:0] grp_ifm_mmcpy_row_fu_278_m_axi_input_r_AWLOCK;
wire   [3:0] grp_ifm_mmcpy_row_fu_278_m_axi_input_r_AWCACHE;
wire   [2:0] grp_ifm_mmcpy_row_fu_278_m_axi_input_r_AWPROT;
wire   [3:0] grp_ifm_mmcpy_row_fu_278_m_axi_input_r_AWQOS;
wire   [3:0] grp_ifm_mmcpy_row_fu_278_m_axi_input_r_AWREGION;
wire   [0:0] grp_ifm_mmcpy_row_fu_278_m_axi_input_r_AWUSER;
wire    grp_ifm_mmcpy_row_fu_278_m_axi_input_r_WVALID;
wire   [31:0] grp_ifm_mmcpy_row_fu_278_m_axi_input_r_WDATA;
wire   [3:0] grp_ifm_mmcpy_row_fu_278_m_axi_input_r_WSTRB;
wire    grp_ifm_mmcpy_row_fu_278_m_axi_input_r_WLAST;
wire   [0:0] grp_ifm_mmcpy_row_fu_278_m_axi_input_r_WID;
wire   [0:0] grp_ifm_mmcpy_row_fu_278_m_axi_input_r_WUSER;
wire    grp_ifm_mmcpy_row_fu_278_m_axi_input_r_ARVALID;
wire   [31:0] grp_ifm_mmcpy_row_fu_278_m_axi_input_r_ARADDR;
wire   [0:0] grp_ifm_mmcpy_row_fu_278_m_axi_input_r_ARID;
wire   [31:0] grp_ifm_mmcpy_row_fu_278_m_axi_input_r_ARLEN;
wire   [2:0] grp_ifm_mmcpy_row_fu_278_m_axi_input_r_ARSIZE;
wire   [1:0] grp_ifm_mmcpy_row_fu_278_m_axi_input_r_ARBURST;
wire   [1:0] grp_ifm_mmcpy_row_fu_278_m_axi_input_r_ARLOCK;
wire   [3:0] grp_ifm_mmcpy_row_fu_278_m_axi_input_r_ARCACHE;
wire   [2:0] grp_ifm_mmcpy_row_fu_278_m_axi_input_r_ARPROT;
wire   [3:0] grp_ifm_mmcpy_row_fu_278_m_axi_input_r_ARQOS;
wire   [3:0] grp_ifm_mmcpy_row_fu_278_m_axi_input_r_ARREGION;
wire   [0:0] grp_ifm_mmcpy_row_fu_278_m_axi_input_r_ARUSER;
wire    grp_ifm_mmcpy_row_fu_278_m_axi_input_r_RREADY;
wire    grp_ifm_mmcpy_row_fu_278_m_axi_input_r_BREADY;
wire   [4:0] grp_ifm_mmcpy_row_fu_278_local_buf_address0;
wire    grp_ifm_mmcpy_row_fu_278_local_buf_ce0;
wire    grp_ifm_mmcpy_row_fu_278_local_buf_we0;
wire   [31:0] grp_ifm_mmcpy_row_fu_278_local_buf_d0;
reg   [7:0] grp_ifm_mmcpy_row_fu_278_t1_n_read;
reg   [7:0] grp_ifm_mmcpy_row_fu_278_t2_n_read;
reg   [7:0] grp_ifm_mmcpy_row_fu_278_bn_n_read;
wire    grp_ifm_mmcpy_row_fu_278_enable;
wire   [7:0] grp_ifm_mmcpy_row_fu_278_ap_return_0;
wire   [7:0] grp_ifm_mmcpy_row_fu_278_ap_return_1;
wire   [7:0] grp_ifm_mmcpy_row_fu_278_ap_return_2;
reg   [7:0] t1_0_reg_196;
reg   [7:0] t2_0_reg_208;
reg   [0:0] ap_phi_mux_pp_1_phi_fu_247_p4;
reg   [16:0] t_0_reg_232;
reg    grp_ifm_copy_lbuf2ibuf_fu_256_ap_start_reg;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state6;
reg    grp_ifm_mmcpy_row_fu_278_ap_start_reg;
reg   [7:0] t1_n0_1_fu_88;
reg   [7:0] t1_n1_1_fu_92;
reg   [7:0] t2_n0_1_fu_96;
reg   [7:0] t2_n1_1_fu_100;
reg   [7:0] bn_n0_1_fu_104;
reg   [7:0] bn_n1_1_fu_108;
wire   [15:0] mul_ln77_fu_338_p0;
wire  signed [31:0] mul_ln77_fu_338_p1;
wire  signed [31:0] sext_ln75_fu_348_p1;
wire   [7:0] t2_fu_437_p2;
wire   [15:0] zext_ln102_fu_443_p1;
wire   [0:0] icmp_ln102_fu_447_p2;
wire   [7:0] t1_fu_452_p2;
wire   [7:0] grp_fu_474_p0;
wire   [23:0] zext_ln75_1_fu_322_p1;
wire   [15:0] grp_fu_474_p1;
wire   [7:0] grp_fu_474_p2;
wire   [24:0] zext_ln75_3_fu_326_p1;
wire   [7:0] grp_fu_482_p0;
wire   [15:0] grp_fu_482_p1;
wire   [7:0] grp_fu_482_p2;
wire   [15:0] grp_fu_490_p0;
wire   [31:0] grp_fu_490_p2;
reg   [5:0] ap_NS_fsm;
wire   [23:0] grp_fu_474_p10;
wire   [23:0] grp_fu_482_p10;
wire   [31:0] grp_fu_490_p00;
wire   [31:0] mul_ln77_fu_338_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 grp_ifm_copy_lbuf2ibuf_fu_256_ap_start_reg = 1'b0;
#0 grp_ifm_mmcpy_row_fu_278_ap_start_reg = 1'b0;
end

input_load_local_dEe #(
    .DataWidth( 32 ),
    .AddressRange( 29 ),
    .AddressWidth( 5 ))
local_buf0_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(local_buf0_1_address0),
    .ce0(local_buf0_1_ce0),
    .we0(local_buf0_1_we0),
    .d0(grp_ifm_mmcpy_row_fu_278_local_buf_d0),
    .q0(local_buf0_1_q0)
);

input_load_local_dEe #(
    .DataWidth( 32 ),
    .AddressRange( 29 ),
    .AddressWidth( 5 ))
local_buf1_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(local_buf1_1_address0),
    .ce0(local_buf1_1_ce0),
    .we0(local_buf1_1_we0),
    .d0(grp_ifm_mmcpy_row_fu_278_local_buf_d0),
    .q0(local_buf1_1_q0)
);

ifm_copy_lbuf2ibuf grp_ifm_copy_lbuf2ibuf_fu_256(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_ifm_copy_lbuf2ibuf_fu_256_ap_start),
    .ap_done(grp_ifm_copy_lbuf2ibuf_fu_256_ap_done),
    .ap_idle(grp_ifm_copy_lbuf2ibuf_fu_256_ap_idle),
    .ap_ready(grp_ifm_copy_lbuf2ibuf_fu_256_ap_ready),
    .input_buffer_0_address0(grp_ifm_copy_lbuf2ibuf_fu_256_input_buffer_0_address0),
    .input_buffer_0_ce0(grp_ifm_copy_lbuf2ibuf_fu_256_input_buffer_0_ce0),
    .input_buffer_0_we0(grp_ifm_copy_lbuf2ibuf_fu_256_input_buffer_0_we0),
    .input_buffer_0_d0(grp_ifm_copy_lbuf2ibuf_fu_256_input_buffer_0_d0),
    .input_buffer_0_address1(grp_ifm_copy_lbuf2ibuf_fu_256_input_buffer_0_address1),
    .input_buffer_0_ce1(grp_ifm_copy_lbuf2ibuf_fu_256_input_buffer_0_ce1),
    .input_buffer_0_we1(grp_ifm_copy_lbuf2ibuf_fu_256_input_buffer_0_we1),
    .input_buffer_0_d1(grp_ifm_copy_lbuf2ibuf_fu_256_input_buffer_0_d1),
    .input_buffer_1_address0(grp_ifm_copy_lbuf2ibuf_fu_256_input_buffer_1_address0),
    .input_buffer_1_ce0(grp_ifm_copy_lbuf2ibuf_fu_256_input_buffer_1_ce0),
    .input_buffer_1_we0(grp_ifm_copy_lbuf2ibuf_fu_256_input_buffer_1_we0),
    .input_buffer_1_d0(grp_ifm_copy_lbuf2ibuf_fu_256_input_buffer_1_d0),
    .input_buffer_1_address1(grp_ifm_copy_lbuf2ibuf_fu_256_input_buffer_1_address1),
    .input_buffer_1_ce1(grp_ifm_copy_lbuf2ibuf_fu_256_input_buffer_1_ce1),
    .input_buffer_1_we1(grp_ifm_copy_lbuf2ibuf_fu_256_input_buffer_1_we1),
    .input_buffer_1_d1(grp_ifm_copy_lbuf2ibuf_fu_256_input_buffer_1_d1),
    .local_buf_address0(grp_ifm_copy_lbuf2ibuf_fu_256_local_buf_address0),
    .local_buf_ce0(grp_ifm_copy_lbuf2ibuf_fu_256_local_buf_ce0),
    .local_buf_q0(grp_ifm_copy_lbuf2ibuf_fu_256_local_buf_q0),
    .TCol(TCol),
    .Input_w(Input_w),
    .Input_h(Input_h),
    .TN_MIN(TN_MIN),
    .pad_val(pad_val),
    .Coffset(Coffset_reg_539),
    .Roffset(Roffset_reg_545),
    .t1(grp_ifm_copy_lbuf2ibuf_fu_256_t1),
    .t2(grp_ifm_copy_lbuf2ibuf_fu_256_t2),
    .bn(grp_ifm_copy_lbuf2ibuf_fu_256_bn),
    .enable(grp_ifm_copy_lbuf2ibuf_fu_256_enable)
);

ifm_mmcpy_row grp_ifm_mmcpy_row_fu_278(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_ifm_mmcpy_row_fu_278_ap_start),
    .ap_done(grp_ifm_mmcpy_row_fu_278_ap_done),
    .ap_idle(grp_ifm_mmcpy_row_fu_278_ap_idle),
    .ap_ready(grp_ifm_mmcpy_row_fu_278_ap_ready),
    .m_axi_input_r_AWVALID(grp_ifm_mmcpy_row_fu_278_m_axi_input_r_AWVALID),
    .m_axi_input_r_AWREADY(1'b0),
    .m_axi_input_r_AWADDR(grp_ifm_mmcpy_row_fu_278_m_axi_input_r_AWADDR),
    .m_axi_input_r_AWID(grp_ifm_mmcpy_row_fu_278_m_axi_input_r_AWID),
    .m_axi_input_r_AWLEN(grp_ifm_mmcpy_row_fu_278_m_axi_input_r_AWLEN),
    .m_axi_input_r_AWSIZE(grp_ifm_mmcpy_row_fu_278_m_axi_input_r_AWSIZE),
    .m_axi_input_r_AWBURST(grp_ifm_mmcpy_row_fu_278_m_axi_input_r_AWBURST),
    .m_axi_input_r_AWLOCK(grp_ifm_mmcpy_row_fu_278_m_axi_input_r_AWLOCK),
    .m_axi_input_r_AWCACHE(grp_ifm_mmcpy_row_fu_278_m_axi_input_r_AWCACHE),
    .m_axi_input_r_AWPROT(grp_ifm_mmcpy_row_fu_278_m_axi_input_r_AWPROT),
    .m_axi_input_r_AWQOS(grp_ifm_mmcpy_row_fu_278_m_axi_input_r_AWQOS),
    .m_axi_input_r_AWREGION(grp_ifm_mmcpy_row_fu_278_m_axi_input_r_AWREGION),
    .m_axi_input_r_AWUSER(grp_ifm_mmcpy_row_fu_278_m_axi_input_r_AWUSER),
    .m_axi_input_r_WVALID(grp_ifm_mmcpy_row_fu_278_m_axi_input_r_WVALID),
    .m_axi_input_r_WREADY(1'b0),
    .m_axi_input_r_WDATA(grp_ifm_mmcpy_row_fu_278_m_axi_input_r_WDATA),
    .m_axi_input_r_WSTRB(grp_ifm_mmcpy_row_fu_278_m_axi_input_r_WSTRB),
    .m_axi_input_r_WLAST(grp_ifm_mmcpy_row_fu_278_m_axi_input_r_WLAST),
    .m_axi_input_r_WID(grp_ifm_mmcpy_row_fu_278_m_axi_input_r_WID),
    .m_axi_input_r_WUSER(grp_ifm_mmcpy_row_fu_278_m_axi_input_r_WUSER),
    .m_axi_input_r_ARVALID(grp_ifm_mmcpy_row_fu_278_m_axi_input_r_ARVALID),
    .m_axi_input_r_ARREADY(m_axi_input_r_ARREADY),
    .m_axi_input_r_ARADDR(grp_ifm_mmcpy_row_fu_278_m_axi_input_r_ARADDR),
    .m_axi_input_r_ARID(grp_ifm_mmcpy_row_fu_278_m_axi_input_r_ARID),
    .m_axi_input_r_ARLEN(grp_ifm_mmcpy_row_fu_278_m_axi_input_r_ARLEN),
    .m_axi_input_r_ARSIZE(grp_ifm_mmcpy_row_fu_278_m_axi_input_r_ARSIZE),
    .m_axi_input_r_ARBURST(grp_ifm_mmcpy_row_fu_278_m_axi_input_r_ARBURST),
    .m_axi_input_r_ARLOCK(grp_ifm_mmcpy_row_fu_278_m_axi_input_r_ARLOCK),
    .m_axi_input_r_ARCACHE(grp_ifm_mmcpy_row_fu_278_m_axi_input_r_ARCACHE),
    .m_axi_input_r_ARPROT(grp_ifm_mmcpy_row_fu_278_m_axi_input_r_ARPROT),
    .m_axi_input_r_ARQOS(grp_ifm_mmcpy_row_fu_278_m_axi_input_r_ARQOS),
    .m_axi_input_r_ARREGION(grp_ifm_mmcpy_row_fu_278_m_axi_input_r_ARREGION),
    .m_axi_input_r_ARUSER(grp_ifm_mmcpy_row_fu_278_m_axi_input_r_ARUSER),
    .m_axi_input_r_RVALID(m_axi_input_r_RVALID),
    .m_axi_input_r_RREADY(grp_ifm_mmcpy_row_fu_278_m_axi_input_r_RREADY),
    .m_axi_input_r_RDATA(m_axi_input_r_RDATA),
    .m_axi_input_r_RLAST(m_axi_input_r_RLAST),
    .m_axi_input_r_RID(m_axi_input_r_RID),
    .m_axi_input_r_RUSER(m_axi_input_r_RUSER),
    .m_axi_input_r_RRESP(m_axi_input_r_RRESP),
    .m_axi_input_r_BVALID(1'b0),
    .m_axi_input_r_BREADY(grp_ifm_mmcpy_row_fu_278_m_axi_input_r_BREADY),
    .m_axi_input_r_BRESP(2'd0),
    .m_axi_input_r_BID(1'd0),
    .m_axi_input_r_BUSER(1'd0),
    .input_offset(input_offset),
    .local_buf_address0(grp_ifm_mmcpy_row_fu_278_local_buf_address0),
    .local_buf_ce0(grp_ifm_mmcpy_row_fu_278_local_buf_ce0),
    .local_buf_we0(grp_ifm_mmcpy_row_fu_278_local_buf_we0),
    .local_buf_d0(grp_ifm_mmcpy_row_fu_278_local_buf_d0),
    .CurrentOffset(CurrentOffset_reg_597),
    .IHxIW(IHxIW),
    .IW_align_256b(IW_align_256b),
    .TCol(TCol),
    .t1(t1_0_reg_196),
    .t2(t2_0_reg_208),
    .t1_n_read(grp_ifm_mmcpy_row_fu_278_t1_n_read),
    .t2_n_read(grp_ifm_mmcpy_row_fu_278_t2_n_read),
    .bn_n_read(grp_ifm_mmcpy_row_fu_278_bn_n_read),
    .enable(grp_ifm_mmcpy_row_fu_278_enable),
    .ap_return_0(grp_ifm_mmcpy_row_fu_278_ap_return_0),
    .ap_return_1(grp_ifm_mmcpy_row_fu_278_ap_return_1),
    .ap_return_2(grp_ifm_mmcpy_row_fu_278_ap_return_2)
);

FPGA_Acc_mac_mul_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 25 ))
FPGA_Acc_mac_mul_fYi_U35(
    .din0(grp_fu_474_p0),
    .din1(grp_fu_474_p1),
    .din2(grp_fu_474_p2),
    .dout(grp_fu_474_p3)
);

FPGA_Acc_mac_mul_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 25 ))
FPGA_Acc_mac_mul_fYi_U36(
    .din0(grp_fu_482_p0),
    .din1(grp_fu_482_p1),
    .din2(grp_fu_482_p2),
    .dout(grp_fu_482_p3)
);

FPGA_Acc_mac_mulag8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 25 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
FPGA_Acc_mac_mulag8j_U37(
    .din0(grp_fu_490_p0),
    .din1(Roffset_reg_545),
    .din2(grp_fu_490_p2),
    .dout(grp_fu_490_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_ifm_copy_lbuf2ibuf_fu_256_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4))) begin
            grp_ifm_copy_lbuf2ibuf_fu_256_ap_start_reg <= 1'b1;
        end else if ((grp_ifm_copy_lbuf2ibuf_fu_256_ap_ready == 1'b1)) begin
            grp_ifm_copy_lbuf2ibuf_fu_256_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_ifm_mmcpy_row_fu_278_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4))) begin
            grp_ifm_mmcpy_row_fu_278_ap_start_reg <= 1'b1;
        end else if ((grp_ifm_mmcpy_row_fu_278_ap_ready == 1'b1)) begin
            grp_ifm_mmcpy_row_fu_278_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5))) begin
        pp_0_reg_220 <= ap_phi_mux_pp_1_phi_fu_247_p4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        pp_0_reg_220 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5))) begin
        t1_0_reg_196 <= select_ln102_fu_458_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        t1_0_reg_196 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5))) begin
        t2_0_reg_208 <= select_ln102_1_fu_466_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        t2_0_reg_208 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5))) begin
        t_0_reg_232 <= t_reg_615;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        t_0_reg_232 <= 17'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        Coffset_reg_539 <= grp_fu_474_p3;
        Roffset_reg_545 <= grp_fu_482_p3;
        mul_ln77_reg_551 <= mul_ln77_fu_338_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        CurrentOffset_reg_597 <= grp_fu_490_p3;
        TnxTRow_reg_602[16 : 1] <= TnxTRow_fu_359_p3[16 : 1];
        or_ln86_reg_607[16 : 1] <= or_ln86_fu_367_p2[16 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state5_on_subcall_done) & (pp_0_reg_220 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        bn_n0_1_fu_104 <= grp_ifm_mmcpy_row_fu_278_ap_return_2;
        t1_n0_1_fu_88 <= grp_ifm_mmcpy_row_fu_278_ap_return_0;
        t2_n0_1_fu_96 <= grp_ifm_mmcpy_row_fu_278_ap_return_1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_fu_373_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        bn_n0_1_load_reg_649 <= bn_n0_1_fu_104;
        bn_n1_1_load_reg_655 <= bn_n1_1_fu_108;
        icmp_ln91_reg_620 <= icmp_ln91_fu_384_p2;
        t1_n0_1_load_reg_625 <= t1_n0_1_fu_88;
        t1_n1_1_load_reg_631 <= t1_n1_1_fu_92;
        t2_n0_1_load_reg_637 <= t2_n0_1_fu_96;
        t2_n1_1_load_reg_643 <= t2_n1_1_fu_100;
    end
end

always @ (posedge ap_clk) begin
    if (((pp_0_reg_220 == 1'd0) & (1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5))) begin
        bn_n1_1_fu_108 <= grp_ifm_mmcpy_row_fu_278_ap_return_2;
        t1_n1_1_fu_92 <= grp_ifm_mmcpy_row_fu_278_ap_return_0;
        t2_n1_1_fu_100 <= grp_ifm_mmcpy_row_fu_278_ap_return_1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_fu_373_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3) & (ap_phi_mux_pp_0_phi_fu_224_p4 == 1'd1))) begin
        icmp_ln92_reg_666 <= grp_fu_300_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_phi_mux_pp_0_phi_fu_224_p4 == 1'd0) & (icmp_ln86_fu_373_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        icmp_ln97_reg_661 <= grp_fu_300_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        t_reg_615 <= t_fu_378_p2;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (icmp_ln86_fu_373_p2 == 1'd1)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if ((pp_0_reg_220 == 1'd0)) begin
            ap_phi_mux_pp_1_phi_fu_247_p4 = 1'd1;
        end else if ((pp_0_reg_220 == 1'd1)) begin
            ap_phi_mux_pp_1_phi_fu_247_p4 = 1'd0;
        end else begin
            ap_phi_mux_pp_1_phi_fu_247_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_pp_1_phi_fu_247_p4 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln86_fu_373_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if ((pp_0_reg_220 == 1'd1)) begin
            grp_ifm_copy_lbuf2ibuf_fu_256_bn = bn_n1_1_load_reg_655;
        end else if ((pp_0_reg_220 == 1'd0)) begin
            grp_ifm_copy_lbuf2ibuf_fu_256_bn = bn_n0_1_load_reg_649;
        end else begin
            grp_ifm_copy_lbuf2ibuf_fu_256_bn = 'bx;
        end
    end else begin
        grp_ifm_copy_lbuf2ibuf_fu_256_bn = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if ((pp_0_reg_220 == 1'd1)) begin
            grp_ifm_copy_lbuf2ibuf_fu_256_enable = icmp_ln92_reg_666;
        end else if ((pp_0_reg_220 == 1'd0)) begin
            grp_ifm_copy_lbuf2ibuf_fu_256_enable = icmp_ln97_reg_661;
        end else begin
            grp_ifm_copy_lbuf2ibuf_fu_256_enable = 'bx;
        end
    end else begin
        grp_ifm_copy_lbuf2ibuf_fu_256_enable = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if ((pp_0_reg_220 == 1'd1)) begin
            grp_ifm_copy_lbuf2ibuf_fu_256_local_buf_q0 = local_buf1_1_q0;
        end else if ((pp_0_reg_220 == 1'd0)) begin
            grp_ifm_copy_lbuf2ibuf_fu_256_local_buf_q0 = local_buf0_1_q0;
        end else begin
            grp_ifm_copy_lbuf2ibuf_fu_256_local_buf_q0 = 'bx;
        end
    end else begin
        grp_ifm_copy_lbuf2ibuf_fu_256_local_buf_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if ((pp_0_reg_220 == 1'd1)) begin
            grp_ifm_copy_lbuf2ibuf_fu_256_t1 = t1_n1_1_load_reg_631;
        end else if ((pp_0_reg_220 == 1'd0)) begin
            grp_ifm_copy_lbuf2ibuf_fu_256_t1 = t1_n0_1_load_reg_625;
        end else begin
            grp_ifm_copy_lbuf2ibuf_fu_256_t1 = 'bx;
        end
    end else begin
        grp_ifm_copy_lbuf2ibuf_fu_256_t1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if ((pp_0_reg_220 == 1'd1)) begin
            grp_ifm_copy_lbuf2ibuf_fu_256_t2 = t2_n1_1_load_reg_643;
        end else if ((pp_0_reg_220 == 1'd0)) begin
            grp_ifm_copy_lbuf2ibuf_fu_256_t2 = t2_n0_1_load_reg_637;
        end else begin
            grp_ifm_copy_lbuf2ibuf_fu_256_t2 = 'bx;
        end
    end else begin
        grp_ifm_copy_lbuf2ibuf_fu_256_t2 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if ((pp_0_reg_220 == 1'd1)) begin
            grp_ifm_mmcpy_row_fu_278_bn_n_read = bn_n0_1_load_reg_649;
        end else if ((pp_0_reg_220 == 1'd0)) begin
            grp_ifm_mmcpy_row_fu_278_bn_n_read = bn_n1_1_load_reg_655;
        end else begin
            grp_ifm_mmcpy_row_fu_278_bn_n_read = 'bx;
        end
    end else begin
        grp_ifm_mmcpy_row_fu_278_bn_n_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if ((pp_0_reg_220 == 1'd1)) begin
            grp_ifm_mmcpy_row_fu_278_t1_n_read = t1_n0_1_load_reg_625;
        end else if ((pp_0_reg_220 == 1'd0)) begin
            grp_ifm_mmcpy_row_fu_278_t1_n_read = t1_n1_1_load_reg_631;
        end else begin
            grp_ifm_mmcpy_row_fu_278_t1_n_read = 'bx;
        end
    end else begin
        grp_ifm_mmcpy_row_fu_278_t1_n_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if ((pp_0_reg_220 == 1'd1)) begin
            grp_ifm_mmcpy_row_fu_278_t2_n_read = t2_n0_1_load_reg_637;
        end else if ((pp_0_reg_220 == 1'd0)) begin
            grp_ifm_mmcpy_row_fu_278_t2_n_read = t2_n1_1_load_reg_643;
        end else begin
            grp_ifm_mmcpy_row_fu_278_t2_n_read = 'bx;
        end
    end else begin
        grp_ifm_mmcpy_row_fu_278_t2_n_read = 'bx;
    end
end

always @ (*) begin
    if ((((pp_0_reg_220 == 1'd1) & (1'b1 == ap_CS_fsm_state5)) | ((pp_0_reg_220 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        input_buffer_0_ce0 = grp_ifm_copy_lbuf2ibuf_fu_256_input_buffer_0_ce0;
    end else begin
        input_buffer_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((pp_0_reg_220 == 1'd1) & (1'b1 == ap_CS_fsm_state5)) | ((pp_0_reg_220 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        input_buffer_0_ce1 = grp_ifm_copy_lbuf2ibuf_fu_256_input_buffer_0_ce1;
    end else begin
        input_buffer_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((pp_0_reg_220 == 1'd1) & (1'b1 == ap_CS_fsm_state5)) | ((pp_0_reg_220 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        input_buffer_0_we0 = grp_ifm_copy_lbuf2ibuf_fu_256_input_buffer_0_we0;
    end else begin
        input_buffer_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((pp_0_reg_220 == 1'd1) & (1'b1 == ap_CS_fsm_state5)) | ((pp_0_reg_220 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        input_buffer_0_we1 = grp_ifm_copy_lbuf2ibuf_fu_256_input_buffer_0_we1;
    end else begin
        input_buffer_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((((pp_0_reg_220 == 1'd1) & (1'b1 == ap_CS_fsm_state5)) | ((pp_0_reg_220 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        input_buffer_1_ce0 = grp_ifm_copy_lbuf2ibuf_fu_256_input_buffer_1_ce0;
    end else begin
        input_buffer_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((pp_0_reg_220 == 1'd1) & (1'b1 == ap_CS_fsm_state5)) | ((pp_0_reg_220 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        input_buffer_1_ce1 = grp_ifm_copy_lbuf2ibuf_fu_256_input_buffer_1_ce1;
    end else begin
        input_buffer_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((pp_0_reg_220 == 1'd1) & (1'b1 == ap_CS_fsm_state5)) | ((pp_0_reg_220 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        input_buffer_1_we0 = grp_ifm_copy_lbuf2ibuf_fu_256_input_buffer_1_we0;
    end else begin
        input_buffer_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((pp_0_reg_220 == 1'd1) & (1'b1 == ap_CS_fsm_state5)) | ((pp_0_reg_220 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        input_buffer_1_we1 = grp_ifm_copy_lbuf2ibuf_fu_256_input_buffer_1_we1;
    end else begin
        input_buffer_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if ((pp_0_reg_220 == 1'd1)) begin
            local_buf0_1_address0 = grp_ifm_mmcpy_row_fu_278_local_buf_address0;
        end else if ((pp_0_reg_220 == 1'd0)) begin
            local_buf0_1_address0 = grp_ifm_copy_lbuf2ibuf_fu_256_local_buf_address0;
        end else begin
            local_buf0_1_address0 = 'bx;
        end
    end else begin
        local_buf0_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if ((pp_0_reg_220 == 1'd1)) begin
            local_buf0_1_ce0 = grp_ifm_mmcpy_row_fu_278_local_buf_ce0;
        end else if ((pp_0_reg_220 == 1'd0)) begin
            local_buf0_1_ce0 = grp_ifm_copy_lbuf2ibuf_fu_256_local_buf_ce0;
        end else begin
            local_buf0_1_ce0 = 1'b0;
        end
    end else begin
        local_buf0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((pp_0_reg_220 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        local_buf0_1_we0 = grp_ifm_mmcpy_row_fu_278_local_buf_we0;
    end else begin
        local_buf0_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if ((pp_0_reg_220 == 1'd0)) begin
            local_buf1_1_address0 = grp_ifm_mmcpy_row_fu_278_local_buf_address0;
        end else if ((pp_0_reg_220 == 1'd1)) begin
            local_buf1_1_address0 = grp_ifm_copy_lbuf2ibuf_fu_256_local_buf_address0;
        end else begin
            local_buf1_1_address0 = 'bx;
        end
    end else begin
        local_buf1_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if ((pp_0_reg_220 == 1'd0)) begin
            local_buf1_1_ce0 = grp_ifm_mmcpy_row_fu_278_local_buf_ce0;
        end else if ((pp_0_reg_220 == 1'd1)) begin
            local_buf1_1_ce0 = grp_ifm_copy_lbuf2ibuf_fu_256_local_buf_ce0;
        end else begin
            local_buf1_1_ce0 = 1'b0;
        end
    end else begin
        local_buf1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((pp_0_reg_220 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        local_buf1_1_we0 = grp_ifm_mmcpy_row_fu_278_local_buf_we0;
    end else begin
        local_buf1_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | ((pp_0_reg_220 == 1'd1) & (1'b1 == ap_CS_fsm_state5)) | ((pp_0_reg_220 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        m_axi_input_r_ARVALID = grp_ifm_mmcpy_row_fu_278_m_axi_input_r_ARVALID;
    end else begin
        m_axi_input_r_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | ((pp_0_reg_220 == 1'd1) & (1'b1 == ap_CS_fsm_state5)) | ((pp_0_reg_220 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        m_axi_input_r_RREADY = grp_ifm_mmcpy_row_fu_278_m_axi_input_r_RREADY;
    end else begin
        m_axi_input_r_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln86_fu_373_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((icmp_ln86_fu_373_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3) & (ap_phi_mux_pp_0_phi_fu_224_p4 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign TnxTRow_fu_359_p3 = {{TRow}, {1'd0}};

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_block_state5_on_subcall_done = (((grp_ifm_copy_lbuf2ibuf_fu_256_ap_done == 1'b0) & (pp_0_reg_220 == 1'd1)) | ((pp_0_reg_220 == 1'd0) & (grp_ifm_copy_lbuf2ibuf_fu_256_ap_done == 1'b0)) | ((grp_ifm_mmcpy_row_fu_278_ap_done == 1'b0) & (pp_0_reg_220 == 1'd1)) | ((pp_0_reg_220 == 1'd0) & (grp_ifm_mmcpy_row_fu_278_ap_done == 1'b0)));
end

assign ap_phi_mux_pp_0_phi_fu_224_p4 = pp_0_reg_220;

assign grp_fu_300_p2 = ((t_0_reg_232 != 17'd0) ? 1'b1 : 1'b0);

assign grp_fu_474_p0 = zext_ln75_1_fu_322_p1;

assign grp_fu_474_p1 = grp_fu_474_p10;

assign grp_fu_474_p10 = c;

assign grp_fu_474_p2 = zext_ln75_3_fu_326_p1;

assign grp_fu_482_p0 = zext_ln75_1_fu_322_p1;

assign grp_fu_482_p1 = grp_fu_482_p10;

assign grp_fu_482_p10 = r;

assign grp_fu_482_p2 = zext_ln75_3_fu_326_p1;

assign grp_fu_490_p0 = grp_fu_490_p00;

assign grp_fu_490_p00 = IW_align_256b;

assign grp_fu_490_p2 = ($signed(mul_ln77_reg_551) + $signed(sext_ln75_fu_348_p1));

assign grp_ifm_copy_lbuf2ibuf_fu_256_ap_start = grp_ifm_copy_lbuf2ibuf_fu_256_ap_start_reg;

assign grp_ifm_mmcpy_row_fu_278_ap_start = grp_ifm_mmcpy_row_fu_278_ap_start_reg;

assign grp_ifm_mmcpy_row_fu_278_enable = icmp_ln91_reg_620;

assign icmp_ln102_fu_447_p2 = ((zext_ln102_fu_443_p1 == TRow) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_373_p2 = ((t_0_reg_232 == or_ln86_reg_607) ? 1'b1 : 1'b0);

assign icmp_ln91_fu_384_p2 = ((t_0_reg_232 != TnxTRow_reg_602) ? 1'b1 : 1'b0);

assign input_buffer_0_address0 = grp_ifm_copy_lbuf2ibuf_fu_256_input_buffer_0_address0;

assign input_buffer_0_address1 = grp_ifm_copy_lbuf2ibuf_fu_256_input_buffer_0_address1;

assign input_buffer_0_d0 = grp_ifm_copy_lbuf2ibuf_fu_256_input_buffer_0_d0;

assign input_buffer_0_d1 = grp_ifm_copy_lbuf2ibuf_fu_256_input_buffer_0_d1;

assign input_buffer_1_address0 = grp_ifm_copy_lbuf2ibuf_fu_256_input_buffer_1_address0;

assign input_buffer_1_address1 = grp_ifm_copy_lbuf2ibuf_fu_256_input_buffer_1_address1;

assign input_buffer_1_d0 = grp_ifm_copy_lbuf2ibuf_fu_256_input_buffer_1_d0;

assign input_buffer_1_d1 = grp_ifm_copy_lbuf2ibuf_fu_256_input_buffer_1_d1;

assign m_axi_input_r_ARADDR = grp_ifm_mmcpy_row_fu_278_m_axi_input_r_ARADDR;

assign m_axi_input_r_ARBURST = grp_ifm_mmcpy_row_fu_278_m_axi_input_r_ARBURST;

assign m_axi_input_r_ARCACHE = grp_ifm_mmcpy_row_fu_278_m_axi_input_r_ARCACHE;

assign m_axi_input_r_ARID = grp_ifm_mmcpy_row_fu_278_m_axi_input_r_ARID;

assign m_axi_input_r_ARLEN = grp_ifm_mmcpy_row_fu_278_m_axi_input_r_ARLEN;

assign m_axi_input_r_ARLOCK = grp_ifm_mmcpy_row_fu_278_m_axi_input_r_ARLOCK;

assign m_axi_input_r_ARPROT = grp_ifm_mmcpy_row_fu_278_m_axi_input_r_ARPROT;

assign m_axi_input_r_ARQOS = grp_ifm_mmcpy_row_fu_278_m_axi_input_r_ARQOS;

assign m_axi_input_r_ARREGION = grp_ifm_mmcpy_row_fu_278_m_axi_input_r_ARREGION;

assign m_axi_input_r_ARSIZE = grp_ifm_mmcpy_row_fu_278_m_axi_input_r_ARSIZE;

assign m_axi_input_r_ARUSER = grp_ifm_mmcpy_row_fu_278_m_axi_input_r_ARUSER;

assign m_axi_input_r_AWADDR = 32'd0;

assign m_axi_input_r_AWBURST = 2'd0;

assign m_axi_input_r_AWCACHE = 4'd0;

assign m_axi_input_r_AWID = 1'd0;

assign m_axi_input_r_AWLEN = 32'd0;

assign m_axi_input_r_AWLOCK = 2'd0;

assign m_axi_input_r_AWPROT = 3'd0;

assign m_axi_input_r_AWQOS = 4'd0;

assign m_axi_input_r_AWREGION = 4'd0;

assign m_axi_input_r_AWSIZE = 3'd0;

assign m_axi_input_r_AWUSER = 1'd0;

assign m_axi_input_r_AWVALID = 1'b0;

assign m_axi_input_r_BREADY = 1'b0;

assign m_axi_input_r_WDATA = 32'd0;

assign m_axi_input_r_WID = 1'd0;

assign m_axi_input_r_WLAST = 1'b0;

assign m_axi_input_r_WSTRB = 4'd0;

assign m_axi_input_r_WUSER = 1'd0;

assign m_axi_input_r_WVALID = 1'b0;

assign mul_ln77_fu_338_p0 = mul_ln77_fu_338_p00;

assign mul_ln77_fu_338_p00 = n;

assign mul_ln77_fu_338_p1 = IHxIW;

assign mul_ln77_fu_338_p2 = ($signed({{1'b0}, {mul_ln77_fu_338_p0}}) * $signed(mul_ln77_fu_338_p1));

assign or_ln86_fu_367_p2 = (17'd1 | TnxTRow_fu_359_p3);

assign select_ln102_1_fu_466_p3 = ((icmp_ln102_fu_447_p2[0:0] === 1'b1) ? 8'd0 : t2_fu_437_p2);

assign select_ln102_fu_458_p3 = ((icmp_ln102_fu_447_p2[0:0] === 1'b1) ? t1_fu_452_p2 : t1_0_reg_196);

assign sext_ln75_fu_348_p1 = $signed(Coffset_reg_539);

assign t1_fu_452_p2 = (t1_0_reg_196 + 8'd1);

assign t2_fu_437_p2 = (t2_0_reg_208 + 8'd1);

assign t_fu_378_p2 = (t_0_reg_232 + 17'd1);

assign zext_ln102_fu_443_p1 = t2_fu_437_p2;

assign zext_ln75_1_fu_322_p1 = Kstride;

assign zext_ln75_3_fu_326_p1 = Padding;

always @ (posedge ap_clk) begin
    TnxTRow_reg_602[0] <= 1'b0;
    or_ln86_reg_607[0] <= 1'b1;
end

endmodule //input_load
