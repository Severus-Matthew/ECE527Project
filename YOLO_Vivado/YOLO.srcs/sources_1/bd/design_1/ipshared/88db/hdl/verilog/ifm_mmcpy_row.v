// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ifm_mmcpy_row (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_input_r_AWVALID,
        m_axi_input_r_AWREADY,
        m_axi_input_r_AWADDR,
        m_axi_input_r_AWID,
        m_axi_input_r_AWLEN,
        m_axi_input_r_AWSIZE,
        m_axi_input_r_AWBURST,
        m_axi_input_r_AWLOCK,
        m_axi_input_r_AWCACHE,
        m_axi_input_r_AWPROT,
        m_axi_input_r_AWQOS,
        m_axi_input_r_AWREGION,
        m_axi_input_r_AWUSER,
        m_axi_input_r_WVALID,
        m_axi_input_r_WREADY,
        m_axi_input_r_WDATA,
        m_axi_input_r_WSTRB,
        m_axi_input_r_WLAST,
        m_axi_input_r_WID,
        m_axi_input_r_WUSER,
        m_axi_input_r_ARVALID,
        m_axi_input_r_ARREADY,
        m_axi_input_r_ARADDR,
        m_axi_input_r_ARID,
        m_axi_input_r_ARLEN,
        m_axi_input_r_ARSIZE,
        m_axi_input_r_ARBURST,
        m_axi_input_r_ARLOCK,
        m_axi_input_r_ARCACHE,
        m_axi_input_r_ARPROT,
        m_axi_input_r_ARQOS,
        m_axi_input_r_ARREGION,
        m_axi_input_r_ARUSER,
        m_axi_input_r_RVALID,
        m_axi_input_r_RREADY,
        m_axi_input_r_RDATA,
        m_axi_input_r_RLAST,
        m_axi_input_r_RID,
        m_axi_input_r_RUSER,
        m_axi_input_r_RRESP,
        m_axi_input_r_BVALID,
        m_axi_input_r_BREADY,
        m_axi_input_r_BRESP,
        m_axi_input_r_BID,
        m_axi_input_r_BUSER,
        input_offset,
        local_buf_address0,
        local_buf_ce0,
        local_buf_we0,
        local_buf_d0,
        CurrentOffset,
        IHxIW,
        IW_align_256b,
        TCol,
        t1,
        t2,
        t1_n_read,
        t2_n_read,
        bn_n_read,
        enable,
        ap_return_0,
        ap_return_1,
        ap_return_2
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_state9 = 12'd256;
parameter    ap_ST_fsm_pp0_stage0 = 12'd512;
parameter    ap_ST_fsm_state13 = 12'd1024;
parameter    ap_ST_fsm_state14 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_input_r_AWVALID;
input   m_axi_input_r_AWREADY;
output  [31:0] m_axi_input_r_AWADDR;
output  [0:0] m_axi_input_r_AWID;
output  [31:0] m_axi_input_r_AWLEN;
output  [2:0] m_axi_input_r_AWSIZE;
output  [1:0] m_axi_input_r_AWBURST;
output  [1:0] m_axi_input_r_AWLOCK;
output  [3:0] m_axi_input_r_AWCACHE;
output  [2:0] m_axi_input_r_AWPROT;
output  [3:0] m_axi_input_r_AWQOS;
output  [3:0] m_axi_input_r_AWREGION;
output  [0:0] m_axi_input_r_AWUSER;
output   m_axi_input_r_WVALID;
input   m_axi_input_r_WREADY;
output  [31:0] m_axi_input_r_WDATA;
output  [3:0] m_axi_input_r_WSTRB;
output   m_axi_input_r_WLAST;
output  [0:0] m_axi_input_r_WID;
output  [0:0] m_axi_input_r_WUSER;
output   m_axi_input_r_ARVALID;
input   m_axi_input_r_ARREADY;
output  [31:0] m_axi_input_r_ARADDR;
output  [0:0] m_axi_input_r_ARID;
output  [31:0] m_axi_input_r_ARLEN;
output  [2:0] m_axi_input_r_ARSIZE;
output  [1:0] m_axi_input_r_ARBURST;
output  [1:0] m_axi_input_r_ARLOCK;
output  [3:0] m_axi_input_r_ARCACHE;
output  [2:0] m_axi_input_r_ARPROT;
output  [3:0] m_axi_input_r_ARQOS;
output  [3:0] m_axi_input_r_ARREGION;
output  [0:0] m_axi_input_r_ARUSER;
input   m_axi_input_r_RVALID;
output   m_axi_input_r_RREADY;
input  [31:0] m_axi_input_r_RDATA;
input   m_axi_input_r_RLAST;
input  [0:0] m_axi_input_r_RID;
input  [0:0] m_axi_input_r_RUSER;
input  [1:0] m_axi_input_r_RRESP;
input   m_axi_input_r_BVALID;
output   m_axi_input_r_BREADY;
input  [1:0] m_axi_input_r_BRESP;
input  [0:0] m_axi_input_r_BID;
input  [0:0] m_axi_input_r_BUSER;
input  [29:0] input_offset;
output  [4:0] local_buf_address0;
output   local_buf_ce0;
output   local_buf_we0;
output  [31:0] local_buf_d0;
input  [31:0] CurrentOffset;
input  [31:0] IHxIW;
input  [15:0] IW_align_256b;
input  [15:0] TCol;
input  [7:0] t1;
input  [7:0] t2;
input  [7:0] t1_n_read;
input  [7:0] t2_n_read;
input  [7:0] bn_n_read;
input   enable;
output  [7:0] ap_return_0;
output  [7:0] ap_return_1;
output  [7:0] ap_return_2;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_input_r_ARVALID;
reg m_axi_input_r_RREADY;
reg local_buf_ce0;
reg local_buf_we0;
reg[7:0] ap_return_0;
reg[7:0] ap_return_1;
reg[7:0] ap_return_2;

(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    input_r_blk_n_AR;
wire    ap_CS_fsm_state3;
reg    input_r_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln19_reg_456;
reg   [15:0] phi_ln19_reg_182;
reg   [15:0] phi_ln19_reg_182_pp0_iter1_reg;
wire    ap_block_state10_pp0_stage0_iter0;
reg    ap_block_state11_pp0_stage0_iter1;
wire    ap_block_state12_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [31:0] input_offset_cast_fu_221_p1;
reg   [31:0] input_offset_cast_reg_409;
wire   [31:0] mul_ln10_fu_229_p2;
reg   [31:0] mul_ln10_reg_414;
wire   [0:0] enable_read_read_fu_92_p2;
wire   [31:0] grp_fu_367_p3;
reg   [31:0] add_ln10_reg_419;
wire   [0:0] begin_num_fu_247_p1;
reg   [0:0] begin_num_reg_424;
wire    ap_CS_fsm_state2;
wire   [15:0] loop_cnts_6_fu_289_p3;
reg   [15:0] loop_cnts_6_reg_429;
wire   [31:0] add_ln19_1_fu_311_p2;
reg   [31:0] add_ln19_1_reg_435;
wire   [7:0] zext_ln12_fu_330_p1;
reg   [7:0] zext_ln12_reg_451;
wire    ap_CS_fsm_state9;
wire   [0:0] icmp_ln19_fu_333_p2;
reg   [0:0] icmp_ln19_reg_456_pp0_iter1_reg;
wire   [15:0] add_ln19_fu_338_p2;
reg   [15:0] add_ln19_reg_460;
reg    ap_enable_reg_pp0_iter0;
reg   [31:0] input_addr_read_reg_465;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state10;
reg    ap_enable_reg_pp0_iter2;
reg   [15:0] ap_phi_mux_phi_ln19_phi_fu_186_p4;
reg   [7:0] phi_ln24_reg_194;
wire    ap_CS_fsm_state13;
reg   [7:0] phi_ln24_1_reg_203;
reg   [7:0] phi_ln24_2_reg_212;
wire   [63:0] zext_ln19_1_fu_344_p1;
wire  signed [63:0] sext_ln19_1_fu_316_p1;
wire   [7:0] mul_ln10_fu_229_p0;
wire  signed [31:0] mul_ln10_fu_229_p1;
(* use_dsp48 = "no" *) wire   [31:0] ifm_offset_fu_243_p2;
wire   [15:0] zext_ln13_fu_251_p1;
wire   [0:0] trunc_ln13_fu_255_p1;
wire   [15:0] TCol_a_fu_258_p2;
wire   [14:0] loop_cnts_fu_269_p4;
wire   [15:0] loop_cnts_4_fu_279_p1;
wire   [0:0] xor_ln13_fu_263_p2;
wire   [15:0] loop_cnts_5_fu_283_p2;
wire   [30:0] tmp_fu_297_p4;
wire  signed [31:0] sext_ln19_fu_307_p1;
wire    ap_CS_fsm_state14;
wire   [7:0] grp_fu_367_p0;
wire   [15:0] grp_fu_367_p1;
reg   [7:0] ap_return_0_preg;
reg   [7:0] ap_return_1_preg;
reg   [7:0] ap_return_2_preg;
reg   [11:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [23:0] grp_fu_367_p00;
wire   [23:0] grp_fu_367_p10;
wire   [31:0] mul_ln10_fu_229_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_return_0_preg = 8'd0;
#0 ap_return_1_preg = 8'd0;
#0 ap_return_2_preg = 8'd0;
end

FPGA_Acc_mac_mulacud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
FPGA_Acc_mac_mulacud_U6(
    .din0(grp_fu_367_p0),
    .din1(grp_fu_367_p1),
    .din2(CurrentOffset),
    .dout(grp_fu_367_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state10) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state10)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state10);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state14)) begin
            ap_return_0_preg <= phi_ln24_2_reg_212;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state14)) begin
            ap_return_1_preg <= phi_ln24_reg_194;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_2_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state14)) begin
            ap_return_2_preg <= phi_ln24_1_reg_203;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_reg_456 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        phi_ln19_reg_182 <= add_ln19_reg_460;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        phi_ln19_reg_182 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        phi_ln24_1_reg_203 <= zext_ln12_reg_451;
    end else if (((enable_read_read_fu_92_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_ln24_1_reg_203 <= bn_n_read;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        phi_ln24_2_reg_212 <= t1;
    end else if (((enable_read_read_fu_92_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_ln24_2_reg_212 <= t1_n_read;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        phi_ln24_reg_194 <= t2;
    end else if (((enable_read_read_fu_92_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_ln24_reg_194 <= t2_n_read;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (enable_read_read_fu_92_p2 == 1'd1))) begin
        add_ln10_reg_419 <= grp_fu_367_p3;
        mul_ln10_reg_414 <= mul_ln10_fu_229_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln19_1_reg_435 <= add_ln19_1_fu_311_p2;
        begin_num_reg_424 <= begin_num_fu_247_p1;
        loop_cnts_6_reg_429 <= loop_cnts_6_fu_289_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln19_reg_460 <= add_ln19_fu_338_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln19_reg_456 <= icmp_ln19_fu_333_p2;
        icmp_ln19_reg_456_pp0_iter1_reg <= icmp_ln19_reg_456;
        phi_ln19_reg_182_pp0_iter1_reg <= phi_ln19_reg_182;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_reg_456 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_addr_read_reg_465 <= m_axi_input_r_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        input_offset_cast_reg_409[29 : 0] <= input_offset_cast_fu_221_p1[29 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        zext_ln12_reg_451[0] <= zext_ln12_fu_330_p1[0];
    end
end

always @ (*) begin
    if ((icmp_ln19_fu_333_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state10 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state10 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln19_reg_456 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_phi_ln19_phi_fu_186_p4 = add_ln19_reg_460;
    end else begin
        ap_phi_mux_phi_ln19_phi_fu_186_p4 = phi_ln19_reg_182;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ap_return_0 = phi_ln24_2_reg_212;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ap_return_1 = phi_ln24_reg_194;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ap_return_2 = phi_ln24_1_reg_203;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        input_r_blk_n_AR = m_axi_input_r_ARREADY;
    end else begin
        input_r_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln19_reg_456 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        input_r_blk_n_R = m_axi_input_r_RVALID;
    end else begin
        input_r_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        local_buf_ce0 = 1'b1;
    end else begin
        local_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln19_reg_456_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        local_buf_we0 = 1'b1;
    end else begin
        local_buf_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_input_r_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_input_r_ARVALID = 1'b1;
    end else begin
        m_axi_input_r_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln19_reg_456 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_input_r_RREADY = 1'b1;
    end else begin
        m_axi_input_r_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((enable_read_read_fu_92_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (enable_read_read_fu_92_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((m_axi_input_r_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln19_fu_333_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln19_fu_333_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign TCol_a_fu_258_p2 = (zext_ln13_fu_251_p1 + TCol);

assign add_ln19_1_fu_311_p2 = ($signed(sext_ln19_fu_307_p1) + $signed(input_offset_cast_reg_409));

assign add_ln19_fu_338_p2 = (ap_phi_mux_phi_ln19_phi_fu_186_p4 + 16'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln19_reg_456 == 1'd0) & (m_axi_input_r_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln19_reg_456 == 1'd0) & (m_axi_input_r_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11_pp0_stage0_iter1 = ((icmp_ln19_reg_456 == 1'd0) & (m_axi_input_r_RVALID == 1'b0));
end

assign ap_block_state12_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign begin_num_fu_247_p1 = ifm_offset_fu_243_p2[0:0];

assign enable_read_read_fu_92_p2 = enable;

assign grp_fu_367_p0 = grp_fu_367_p00;

assign grp_fu_367_p00 = t2;

assign grp_fu_367_p1 = grp_fu_367_p10;

assign grp_fu_367_p10 = IW_align_256b;

assign icmp_ln19_fu_333_p2 = ((ap_phi_mux_phi_ln19_phi_fu_186_p4 == loop_cnts_6_reg_429) ? 1'b1 : 1'b0);

assign ifm_offset_fu_243_p2 = (add_ln10_reg_419 + mul_ln10_reg_414);

assign input_offset_cast_fu_221_p1 = input_offset;

assign local_buf_address0 = zext_ln19_1_fu_344_p1;

assign local_buf_d0 = input_addr_read_reg_465;

assign loop_cnts_4_fu_279_p1 = loop_cnts_fu_269_p4;

assign loop_cnts_5_fu_283_p2 = (16'd1 + loop_cnts_4_fu_279_p1);

assign loop_cnts_6_fu_289_p3 = ((xor_ln13_fu_263_p2[0:0] === 1'b1) ? loop_cnts_5_fu_283_p2 : loop_cnts_4_fu_279_p1);

assign loop_cnts_fu_269_p4 = {{TCol_a_fu_258_p2[15:1]}};

assign m_axi_input_r_ARADDR = sext_ln19_1_fu_316_p1;

assign m_axi_input_r_ARBURST = 2'd0;

assign m_axi_input_r_ARCACHE = 4'd0;

assign m_axi_input_r_ARID = 1'd0;

assign m_axi_input_r_ARLEN = loop_cnts_6_reg_429;

assign m_axi_input_r_ARLOCK = 2'd0;

assign m_axi_input_r_ARPROT = 3'd0;

assign m_axi_input_r_ARQOS = 4'd0;

assign m_axi_input_r_ARREGION = 4'd0;

assign m_axi_input_r_ARSIZE = 3'd0;

assign m_axi_input_r_ARUSER = 1'd0;

assign m_axi_input_r_AWADDR = 32'd0;

assign m_axi_input_r_AWBURST = 2'd0;

assign m_axi_input_r_AWCACHE = 4'd0;

assign m_axi_input_r_AWID = 1'd0;

assign m_axi_input_r_AWLEN = 32'd0;

assign m_axi_input_r_AWLOCK = 2'd0;

assign m_axi_input_r_AWPROT = 3'd0;

assign m_axi_input_r_AWQOS = 4'd0;

assign m_axi_input_r_AWREGION = 4'd0;

assign m_axi_input_r_AWSIZE = 3'd0;

assign m_axi_input_r_AWUSER = 1'd0;

assign m_axi_input_r_AWVALID = 1'b0;

assign m_axi_input_r_BREADY = 1'b0;

assign m_axi_input_r_WDATA = 32'd0;

assign m_axi_input_r_WID = 1'd0;

assign m_axi_input_r_WLAST = 1'b0;

assign m_axi_input_r_WSTRB = 4'd0;

assign m_axi_input_r_WUSER = 1'd0;

assign m_axi_input_r_WVALID = 1'b0;

assign mul_ln10_fu_229_p0 = mul_ln10_fu_229_p00;

assign mul_ln10_fu_229_p00 = t1;

assign mul_ln10_fu_229_p1 = IHxIW;

assign mul_ln10_fu_229_p2 = ($signed({{1'b0}, {mul_ln10_fu_229_p0}}) * $signed(mul_ln10_fu_229_p1));

assign sext_ln19_1_fu_316_p1 = $signed(add_ln19_1_reg_435);

assign sext_ln19_fu_307_p1 = $signed(tmp_fu_297_p4);

assign tmp_fu_297_p4 = {{ifm_offset_fu_243_p2[31:1]}};

assign trunc_ln13_fu_255_p1 = TCol[0:0];

assign xor_ln13_fu_263_p2 = (trunc_ln13_fu_255_p1 ^ begin_num_fu_247_p1);

assign zext_ln12_fu_330_p1 = begin_num_reg_424;

assign zext_ln13_fu_251_p1 = begin_num_fu_247_p1;

assign zext_ln19_1_fu_344_p1 = phi_ln19_reg_182_pp0_iter1_reg;

always @ (posedge ap_clk) begin
    input_offset_cast_reg_409[31:30] <= 2'b00;
    zext_ln12_reg_451[7:1] <= 7'b0000000;
end

endmodule //ifm_mmcpy_row
